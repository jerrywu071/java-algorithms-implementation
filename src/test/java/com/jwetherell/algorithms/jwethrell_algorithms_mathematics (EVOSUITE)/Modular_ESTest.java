/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 30 22:52:01 GMT 2024
 */

package com.jwetherell.algorithms.mathematics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jwetherell.algorithms.mathematics.Modular;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Modular_ESTest extends Modular_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Modular.divide((-730L), (-779L), 2003L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Modular.divide(363L, 1L, 3200L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Modular.pow(1302L, 1302L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mod argument is not grater then 0
         //
         verifyException("com.jwetherell.algorithms.mathematics.Modular", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Modular.multiply((-337L), (-828L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mod argument is not grater then 0
         //
         verifyException("com.jwetherell.algorithms.mathematics.Modular", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Modular.subtract((-1L), (-1L), (-1114L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mod argument is not grater then 0
         //
         verifyException("com.jwetherell.algorithms.mathematics.Modular", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Modular.subtract((-1L), (-1L), 2L);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Modular.add((-648L), (-648L), (-648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mod argument is not grater then 0
         //
         verifyException("com.jwetherell.algorithms.mathematics.Modular", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Modular.subtract(1L, 0L, 2L);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Modular.divide(0L, 2083L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Modular.pow(1L, 3000L, 2589L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Modular.pow(1L, 0L, 696L);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Modular.multiply((-136L), (-136L), 353L);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Modular.add(950L, (-1L), 1571L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Modular.add(0L, 3200L, 1L);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Modular.divide(2457L, 1L, 2457L);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Modular.divide(1658L, 4072L, 1658L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // b and mod are not coprime
         //
         verifyException("com.jwetherell.algorithms.mathematics.Modular", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Modular.divide(0L, 967L, 967L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dividing by zero
         //
         verifyException("com.jwetherell.algorithms.mathematics.Modular", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Modular.divide((-2791L), (-2791L), (-2791L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mod argument is not grater then 0
         //
         verifyException("com.jwetherell.algorithms.mathematics.Modular", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Modular.pow(1L, 0L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0^0 expression
         //
         verifyException("com.jwetherell.algorithms.mathematics.Modular", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Modular.pow(3366L, 3366L, 3366L);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Modular.pow(2003L, (-730L), (-33L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mod argument is not grater then 0
         //
         verifyException("com.jwetherell.algorithms.mathematics.Modular", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Modular.pow(7L, (-1280L), 7L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Exponent have to be grater or equal to zero
         //
         verifyException("com.jwetherell.algorithms.mathematics.Modular", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Modular.multiply((-1L), 1894L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mod argument is not grater then 0
         //
         verifyException("com.jwetherell.algorithms.mathematics.Modular", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Modular.subtract((-1L), 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mod argument is not grater then 0
         //
         verifyException("com.jwetherell.algorithms.mathematics.Modular", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Modular.add(0L, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mod argument is not grater then 0
         //
         verifyException("com.jwetherell.algorithms.mathematics.Modular", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = Modular.multiply((-2802L), (-2802L), 1920L);
      assertEquals(324L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = Modular.multiply(1L, (-1L), 1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Modular modular0 = new Modular();
  }
}
