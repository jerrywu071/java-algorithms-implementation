/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 30 22:41:45 GMT 2024
 */

package com.jwetherell.algorithms.data_structures;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jwetherell.algorithms.data_structures.Matrix;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      BigInteger[][] bigIntegerArray0 = new BigInteger[7][9];
      BigInteger[] bigIntegerArray1 = new BigInteger[4];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      bigIntegerArray1[0] = bigInteger0;
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      bigIntegerArray1[1] = bigInteger1;
      BigInteger bigInteger2 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      bigIntegerArray1[2] = bigInteger2;
      BigInteger bigInteger3 = BigInteger.ONE;
      assertEquals((short)1, bigInteger3.shortValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertSame(bigInteger3, bigInteger0);
      assertSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      
      bigIntegerArray1[3] = bigInteger3;
      bigIntegerArray0[0] = bigIntegerArray1;
      BigInteger[] bigIntegerArray2 = new BigInteger[1];
      assertFalse(bigIntegerArray2.equals((Object)bigIntegerArray1));
      
      bigIntegerArray2[0] = bigInteger0;
      byte byte0 = bigInteger0.byteValueExact();
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, byte0);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger3);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      
      bigIntegerArray0[1] = bigIntegerArray2;
      BigInteger bigInteger4 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertNotNull(bigInteger4);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger3);
      assertSame(bigInteger4, bigInteger1);
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      
      bigIntegerArray0[2] = bigIntegerArray2;
      BigInteger[] bigIntegerArray3 = new BigInteger[8];
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray1));
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray2));
      
      bigIntegerArray3[0] = bigInteger3;
      bigIntegerArray3[1] = bigInteger3;
      bigIntegerArray3[2] = bigInteger0;
      bigIntegerArray3[3] = bigInteger3;
      bigIntegerArray3[4] = bigInteger4;
      BigInteger bigInteger5 = BigInteger.TEN;
      assertEquals((short)10, bigInteger5.shortValue());
      assertEquals((byte)10, bigInteger5.byteValue());
      assertNotNull(bigInteger5);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger1);
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      
      BigInteger bigInteger6 = bigInteger4.shiftRight(21);
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((byte)0, bigInteger6.byteValue());
      assertEquals((short)0, bigInteger6.shortValue());
      assertNotNull(bigInteger6);
      assertNotSame(bigInteger4, bigInteger2);
      assertSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger3);
      assertSame(bigInteger4, bigInteger1);
      assertSame(bigInteger6, bigInteger4);
      assertSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger2);
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      
      bigIntegerArray3[5] = bigInteger5;
      bigIntegerArray3[6] = bigInteger4;
      bigIntegerArray0[3] = bigIntegerArray3;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1, bigIntegerArray0);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(7, bigIntegerArray0.length);
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = new Matrix<BigInteger>(31, 1);
      assertEquals(31, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<BigInteger> matrix2 = matrix0.add(matrix1);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(31, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(7, bigIntegerArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      // Undeclared exception!
      try { 
        matrix2.add(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigInteger[][] bigIntegerArray0 = new BigInteger[7][9];
      BigInteger[] bigIntegerArray1 = new BigInteger[4];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      bigIntegerArray1[0] = bigInteger0;
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      bigIntegerArray1[1] = bigInteger1;
      BigInteger bigInteger2 = BigInteger.ONE;
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      bigIntegerArray1[2] = bigInteger2;
      BigInteger bigInteger3 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      assertNotNull(bigInteger3);
      assertSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertSame(bigInteger3, bigInteger0);
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      
      bigIntegerArray1[3] = bigInteger3;
      bigIntegerArray0[0] = bigIntegerArray1;
      BigInteger[] bigIntegerArray2 = new BigInteger[1];
      assertFalse(bigIntegerArray2.equals((Object)bigIntegerArray1));
      
      bigIntegerArray2[0] = bigInteger0;
      byte byte0 = bigInteger0.byteValueExact();
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, byte0);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      
      bigIntegerArray0[1] = bigIntegerArray2;
      BigInteger bigInteger4 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertNotNull(bigInteger4);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger2);
      assertSame(bigInteger4, bigInteger1);
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      
      bigIntegerArray0[2] = bigIntegerArray2;
      BigInteger[] bigIntegerArray3 = new BigInteger[8];
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray2));
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray1));
      
      bigIntegerArray3[0] = bigInteger3;
      bigIntegerArray3[1] = bigInteger3;
      bigIntegerArray3[3] = bigInteger3;
      bigIntegerArray3[4] = bigInteger4;
      bigIntegerArray3[5] = bigInteger0;
      bigIntegerArray3[6] = bigInteger4;
      bigIntegerArray0[3] = bigIntegerArray3;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1, bigIntegerArray0);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(7, bigIntegerArray0.length);
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = matrix0.multiply(matrix0);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(7, bigIntegerArray0.length);
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertTrue(matrix1.equals((Object)matrix0));
      
      Matrix<BigInteger> matrix2 = matrix0.add(matrix1);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(7, bigIntegerArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      Matrix<BigInteger> matrix3 = matrix0.subtract(matrix2);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix3.getCols());
      assertEquals(1, matrix3.getRows());
      assertEquals(7, bigIntegerArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertTrue(matrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)matrix2));
      assertTrue(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix2));
      
      Matrix<BigInteger> matrix4 = matrix3.multiply(matrix1);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix3.getCols());
      assertEquals(1, matrix3.getRows());
      assertEquals(1, matrix4.getRows());
      assertEquals(1, matrix4.getCols());
      assertEquals(7, bigIntegerArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix0);
      assertTrue(matrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)matrix3));
      assertTrue(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix3));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix3));
      assertFalse(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix3));
      assertFalse(matrix4.equals((Object)matrix2));
      assertFalse(matrix4.equals((Object)matrix1));
      assertFalse(matrix4.equals((Object)matrix0));
      
      // Undeclared exception!
      try { 
        matrix4.getRow(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>(1, 1);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertNotNull(matrix0);
      
      Double[][] doubleArray0 = new Double[9][5];
      Double[] doubleArray1 = new Double[1];
      Double double0 = new Double((-5223.061577));
      assertEquals((-5223.061577), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double0;
      doubleArray2[1] = double0;
      doubleArray2[2] = double0;
      doubleArray2[3] = double0;
      doubleArray2[4] = double0;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = double0;
      doubleArray3[1] = double0;
      doubleArray3[2] = double0;
      doubleArray3[3] = double0;
      doubleArray3[4] = double0;
      doubleArray3[5] = double0;
      doubleArray0[2] = doubleArray3;
      Double[] doubleArray4 = new Double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = double0;
      doubleArray4[1] = double0;
      doubleArray4[2] = double0;
      doubleArray4[3] = double0;
      doubleArray4[4] = double0;
      doubleArray0[3] = doubleArray4;
      Double[] doubleArray5 = new Double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = double0;
      doubleArray5[1] = double0;
      doubleArray5[2] = double0;
      doubleArray5[3] = double0;
      Double double1 = new Double((-1173.25452));
      assertEquals((-1173.25452), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray5[4] = double1;
      doubleArray5[5] = double0;
      doubleArray0[4] = doubleArray5;
      Double[] doubleArray6 = new Double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = double1;
      doubleArray6[1] = double0;
      doubleArray6[2] = double0;
      doubleArray0[5] = doubleArray6;
      Double[] doubleArray7 = new Double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = double1;
      doubleArray7[1] = double1;
      doubleArray7[2] = double1;
      doubleArray7[3] = double0;
      doubleArray7[4] = double0;
      doubleArray7[5] = double1;
      doubleArray7[6] = double1;
      doubleArray7[7] = double0;
      doubleArray7[8] = double1;
      doubleArray0[6] = doubleArray7;
      Double[] doubleArray8 = new Double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray8[0] = double0;
      doubleArray8[1] = double1;
      doubleArray8[2] = double1;
      doubleArray8[3] = double0;
      doubleArray8[4] = double0;
      doubleArray8[5] = double0;
      Double double2 = new Double((-1878.50265));
      assertEquals((-1878.50265), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray8[6] = double2;
      doubleArray0[7] = doubleArray8;
      Double[] doubleArray9 = new Double[1];
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      
      doubleArray9[0] = double2;
      doubleArray0[8] = doubleArray9;
      Matrix<Double> matrix1 = new Matrix<Double>(1, 1, doubleArray0);
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(9, doubleArray0.length);
      assertNotNull(matrix1);
      
      // Undeclared exception!
      try { 
        matrix0.add(matrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      BigInteger[][] bigIntegerArray0 = new BigInteger[4][9];
      BigInteger[] bigIntegerArray1 = new BigInteger[4];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      bigIntegerArray1[0] = bigInteger0;
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      bigIntegerArray1[1] = bigInteger1;
      BigInteger bigInteger2 = BigInteger.ONE;
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      bigIntegerArray1[3] = bigInteger2;
      bigIntegerArray0[0] = bigIntegerArray1;
      BigInteger[] bigIntegerArray2 = new BigInteger[1];
      assertFalse(bigIntegerArray2.equals((Object)bigIntegerArray1));
      
      bigIntegerArray2[0] = bigInteger0;
      byte byte0 = bigInteger0.byteValueExact();
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, byte0);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      
      bigIntegerArray0[1] = bigIntegerArray2;
      BigInteger bigInteger3 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertNotNull(bigInteger3);
      assertSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      
      bigIntegerArray0[2] = bigIntegerArray2;
      BigInteger[] bigIntegerArray3 = new BigInteger[8];
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray1));
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray2));
      
      bigIntegerArray3[0] = bigInteger2;
      bigIntegerArray3[1] = bigInteger2;
      bigIntegerArray3[2] = bigInteger0;
      bigIntegerArray3[3] = bigInteger2;
      bigIntegerArray3[4] = bigInteger3;
      BigInteger bigInteger4 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger4.byteValue());
      assertEquals((short)10, bigInteger4.shortValue());
      assertNotNull(bigInteger4);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger0);
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      
      bigIntegerArray0[3] = bigIntegerArray3;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1, bigIntegerArray0);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(4, bigIntegerArray0.length);
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = new Matrix<BigInteger>((byte)1, 1);
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertNotNull(matrix1);
      
      // Undeclared exception!
      try { 
        matrix0.add(matrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger[][] bigIntegerArray0 = new BigInteger[4][9];
      BigInteger[] bigIntegerArray1 = new BigInteger[4];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      bigIntegerArray1[0] = bigInteger0;
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      bigIntegerArray1[1] = bigInteger1;
      BigInteger bigInteger2 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      bigIntegerArray1[2] = bigInteger2;
      BigInteger bigInteger3 = BigInteger.ONE;
      assertEquals((short)1, bigInteger3.shortValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertSame(bigInteger3, bigInteger2);
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      
      bigIntegerArray1[3] = bigInteger3;
      bigIntegerArray0[0] = bigIntegerArray1;
      BigInteger[] bigIntegerArray2 = new BigInteger[1];
      assertFalse(bigIntegerArray2.equals((Object)bigIntegerArray1));
      
      bigIntegerArray2[0] = bigInteger0;
      byte byte0 = bigInteger0.byteValueExact();
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, byte0);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger3);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      
      bigIntegerArray0[1] = bigIntegerArray2;
      BigInteger bigInteger4 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertNotNull(bigInteger4);
      assertSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger3);
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      
      bigIntegerArray0[2] = bigIntegerArray2;
      BigInteger[] bigIntegerArray3 = new BigInteger[8];
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray2));
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray1));
      
      bigIntegerArray3[0] = bigInteger3;
      bigIntegerArray3[1] = bigInteger3;
      bigIntegerArray3[2] = bigInteger0;
      bigIntegerArray3[3] = bigInteger3;
      bigIntegerArray3[4] = bigInteger4;
      BigInteger bigInteger5 = BigInteger.TEN;
      assertEquals((short)10, bigInteger5.shortValue());
      assertEquals((byte)10, bigInteger5.byteValue());
      assertNotNull(bigInteger5);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger0);
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      
      bigIntegerArray3[5] = bigInteger5;
      bigIntegerArray3[6] = bigInteger4;
      bigIntegerArray0[3] = bigIntegerArray3;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1, bigIntegerArray0);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(4, bigIntegerArray0.length);
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = matrix0.add(matrix0);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(4, bigIntegerArray0.length);
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<BigInteger> matrix2 = matrix0.multiply(matrix0);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(4, bigIntegerArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      
      // Undeclared exception!
      try { 
        matrix2.getRow(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1;
      BigInteger[][] bigIntegerArray0 = new BigInteger[4][9];
      BigInteger[] bigIntegerArray1 = new BigInteger[4];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      bigIntegerArray1[0] = bigInteger0;
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      bigIntegerArray1[1] = bigInteger1;
      bigIntegerArray1[2] = bigInteger1;
      BigInteger bigInteger2 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      bigIntegerArray1[3] = bigInteger2;
      bigIntegerArray0[0] = bigIntegerArray1;
      BigInteger[] bigIntegerArray2 = new BigInteger[1];
      assertFalse(bigIntegerArray2.equals((Object)bigIntegerArray1));
      
      bigIntegerArray2[0] = bigInteger0;
      byte byte0 = bigInteger0.byteValueExact();
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, byte0);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      
      bigIntegerArray0[1] = bigIntegerArray2;
      BigInteger bigInteger3 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertNotSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      
      bigIntegerArray0[2] = bigIntegerArray2;
      boolean boolean0 = bigInteger3.isProbablePrime(1);
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertFalse(boolean0);
      assertNotSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      
      BigInteger[] bigIntegerArray3 = new BigInteger[8];
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray1));
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray2));
      
      bigIntegerArray3[0] = bigInteger2;
      bigIntegerArray3[1] = bigInteger2;
      bigIntegerArray3[2] = bigInteger0;
      bigIntegerArray3[4] = bigInteger3;
      BigInteger bigInteger4 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger4.byteValue());
      assertEquals((short)10, bigInteger4.shortValue());
      assertNotNull(bigInteger4);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      
      BigInteger bigInteger5 = bigInteger3.shiftLeft((byte)1);
      assertEquals((byte)0, bigInteger5.byteValue());
      assertEquals((short)0, bigInteger5.shortValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertNotNull(bigInteger5);
      assertSame(bigInteger5, bigInteger3);
      assertSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger1);
      assertSame(bigInteger3, bigInteger5);
      assertNotSame(bigInteger3, bigInteger0);
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      
      bigIntegerArray3[5] = bigInteger4;
      bigIntegerArray3[6] = bigInteger3;
      bigIntegerArray0[3] = bigIntegerArray3;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1, bigIntegerArray0);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(4, bigIntegerArray0.length);
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = new Matrix<BigInteger>(31, 1);
      assertEquals(1, matrix1.getCols());
      assertEquals(31, matrix1.getRows());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<BigInteger> matrix2 = matrix0.identity();
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(4, bigIntegerArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      
      Random.setNextRandom(1);
      Matrix<BigInteger> matrix3 = matrix0.add(matrix1);
      assertEquals(1, matrix3.getCols());
      assertEquals(1, matrix3.getRows());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getCols());
      assertEquals(31, matrix1.getRows());
      assertEquals(4, bigIntegerArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      
      // Undeclared exception!
      try { 
        matrix0.subtract(matrix3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Float[][] floatArray0 = new Float[5][6];
      Float[] floatArray1 = new Float[9];
      Float float0 = new Float((double) 1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      Float float1 = new Float((float) 1);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray1[1] = float1;
      Float float2 = new Float(1946.063F);
      assertEquals(1946.063F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      floatArray1[2] = float2;
      Float float3 = new Float((-1103.0));
      assertEquals((-1103.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      floatArray1[3] = float3;
      Float float4 = new Float((-1268.1825F));
      assertEquals((-1268.1825F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      floatArray1[4] = float4;
      Float float5 = new Float((float) floatArray1[0]);
      assertEquals(9, floatArray1.length);
      assertEquals(1.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      floatArray1[5] = float5;
      Float float6 = new Float((float) floatArray1[5]);
      assertEquals(9, floatArray1.length);
      assertEquals(1.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      
      floatArray1[6] = float6;
      Float float7 = new Float(0.0F);
      assertEquals(0.0F, (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      
      floatArray1[7] = float7;
      Float float8 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      
      floatArray1[8] = float8;
      floatArray0[0] = floatArray1;
      Float[] floatArray2 = new Float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = float7;
      floatArray0[1] = floatArray2;
      Float[] floatArray3 = new Float[0];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray0[2] = floatArray3;
      Float[] floatArray4 = new Float[6];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      Float float9 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float9, 0.01F);
      assertNotNull(float9);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertEquals((float)float9, (float)float7, 0.01F);
      assertEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      
      floatArray4[0] = float9;
      floatArray4[1] = float4;
      floatArray4[2] = float5;
      floatArray4[3] = float4;
      floatArray4[4] = float4;
      floatArray4[5] = float2;
      floatArray0[3] = floatArray4;
      Float[] floatArray5 = new Float[7];
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray5[0] = float5;
      floatArray5[1] = float9;
      floatArray5[2] = float7;
      floatArray5[3] = float7;
      floatArray5[4] = float5;
      floatArray5[5] = float7;
      floatArray5[6] = float5;
      floatArray0[4] = floatArray5;
      Matrix<Float> matrix0 = new Matrix<Float>(1, 1, floatArray0);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(5, floatArray0.length);
      assertNotNull(matrix0);
      
      Matrix<Float> matrix1 = new Matrix<Float>(1, 243);
      assertEquals(243, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Float> matrix2 = matrix0.add(matrix1);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(243, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(5, floatArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      // Undeclared exception!
      try { 
        matrix2.subtract(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(249, 249);
      assertEquals(249, matrix0.getCols());
      assertEquals(249, matrix0.getRows());
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = new Matrix<BigInteger>(249, 344);
      assertEquals(344, matrix1.getCols());
      assertEquals(249, matrix1.getRows());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<BigInteger> matrix2 = matrix0.add(matrix1);
      assertEquals(249, matrix0.getCols());
      assertEquals(249, matrix0.getRows());
      assertEquals(344, matrix1.getCols());
      assertEquals(249, matrix1.getRows());
      assertEquals(249, matrix2.getCols());
      assertEquals(249, matrix2.getRows());
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      // Undeclared exception!
      matrix2.copy(matrix1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = matrix0.identity();
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      Matrix<BigInteger> matrix2 = matrix0.identity();
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertTrue(matrix2.equals((Object)matrix1));
      
      boolean boolean0 = matrix1.equals(matrix1);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertTrue(boolean0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertTrue(matrix1.equals((Object)matrix2));
      
      Matrix<BigInteger> matrix3 = matrix1.add(matrix2);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix3.getRows());
      assertEquals(1, matrix3.getCols());
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix0);
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix2));
      
      boolean boolean1 = matrix3.equals(matrix2);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix3.getRows());
      assertEquals(1, matrix3.getCols());
      assertFalse(boolean1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix0);
      assertFalse(matrix1.equals((Object)matrix3));
      assertTrue(matrix1.equals((Object)matrix2));
      assertFalse(matrix2.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix2));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        matrix2.equals(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1;
      BigInteger[][] bigIntegerArray0 = new BigInteger[4][9];
      BigInteger[] bigIntegerArray1 = new BigInteger[4];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      bigIntegerArray1[0] = bigInteger0;
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      bigIntegerArray1[1] = bigInteger1;
      BigInteger bigInteger2 = BigInteger.ONE;
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      bigIntegerArray1[2] = bigInteger2;
      BigInteger bigInteger3 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      assertNotNull(bigInteger3);
      assertSame(bigInteger3, bigInteger0);
      assertSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      
      bigIntegerArray1[3] = bigInteger3;
      bigIntegerArray0[0] = bigIntegerArray1;
      BigInteger[] bigIntegerArray2 = new BigInteger[1];
      assertFalse(bigIntegerArray2.equals((Object)bigIntegerArray1));
      
      bigIntegerArray2[0] = bigInteger0;
      bigIntegerArray0[1] = bigIntegerArray2;
      BigInteger[] bigIntegerArray3 = new BigInteger[2];
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray2));
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray1));
      
      bigIntegerArray3[0] = bigInteger0;
      BigInteger bigInteger4 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertNotNull(bigInteger4);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertSame(bigInteger4, bigInteger1);
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      
      bigIntegerArray3[1] = bigInteger4;
      bigIntegerArray0[2] = bigIntegerArray3;
      BigInteger[] bigIntegerArray4 = new BigInteger[8];
      assertFalse(bigIntegerArray4.equals((Object)bigIntegerArray3));
      assertFalse(bigIntegerArray4.equals((Object)bigIntegerArray1));
      assertFalse(bigIntegerArray4.equals((Object)bigIntegerArray2));
      
      bigIntegerArray4[0] = bigInteger3;
      bigIntegerArray4[1] = bigInteger3;
      bigIntegerArray4[2] = bigInteger1;
      bigIntegerArray4[3] = bigInteger3;
      bigIntegerArray4[4] = bigInteger4;
      BigInteger bigInteger5 = BigInteger.TEN;
      assertEquals((short)10, bigInteger5.shortValue());
      assertEquals((byte)10, bigInteger5.byteValue());
      assertNotNull(bigInteger5);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger4);
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      
      bigIntegerArray4[5] = bigInteger5;
      bigIntegerArray4[6] = bigInteger4;
      bigIntegerArray4[7] = bigInteger2;
      bigIntegerArray0[3] = bigIntegerArray4;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1, bigIntegerArray0);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(4, bigIntegerArray0.length);
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = new Matrix<BigInteger>(31, 1);
      assertEquals(31, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<BigInteger> matrix2 = matrix0.add(matrix1);
      assertEquals(31, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(4, bigIntegerArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)matrix1));
      
      // Undeclared exception!
      try { 
        matrix0.subtract(matrix2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      Matrix<Float> matrix0 = new Matrix<Float>(0, 0);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertNotNull(matrix0);
      
      int int1 = 0;
      Matrix<Float> matrix1 = new Matrix<Float>(0, 4095);
      assertEquals(4095, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      boolean boolean0 = matrix1.equals(matrix0);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(4095, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertFalse(boolean0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Float> matrix2 = matrix0.add(matrix1);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(4095, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      Integer[][] integerArray0 = new Integer[8][0];
      Integer[] integerArray1 = new Integer[9];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      integerArray1[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      
      integerArray1[1] = integer1;
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray1[2] = integer2;
      Integer integer3 = new Integer(3454);
      assertEquals(3454, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      
      integerArray1[3] = integer3;
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)int1));
      
      integerArray1[4] = integer4;
      try { 
        Integer.valueOf("com.jwetherell.algorithms.data_structures.Matrix$1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.jwetherell.algorithms.data_structures.Matrix$1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>((-799), (-799));
      assertEquals((-799), matrix0.getCols());
      assertEquals((-799), matrix0.getRows());
      assertNotNull(matrix0);
      
      BigInteger[][] bigIntegerArray0 = new BigInteger[1][0];
      BigInteger[] bigIntegerArray1 = new BigInteger[7];
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      bigIntegerArray1[0] = bigInteger0;
      BigInteger bigInteger1 = BigInteger.ONE;
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      bigIntegerArray1[1] = bigInteger1;
      BigInteger bigInteger2 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      
      bigIntegerArray1[2] = bigInteger2;
      BigInteger bigInteger3 = BigInteger.TEN;
      assertEquals((short)10, bigInteger3.shortValue());
      assertEquals((byte)10, bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      
      bigIntegerArray1[3] = bigInteger3;
      BigInteger bigInteger4 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger4.byteValue());
      assertEquals((short)1, bigInteger4.shortValue());
      assertNotNull(bigInteger4);
      assertNotSame(bigInteger4, bigInteger3);
      assertSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger0);
      assertSame(bigInteger4, bigInteger2);
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      
      bigIntegerArray1[4] = bigInteger4;
      BigInteger bigInteger5 = BigInteger.ONE;
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertNotNull(bigInteger5);
      assertNotSame(bigInteger5, bigInteger0);
      assertSame(bigInteger5, bigInteger2);
      assertSame(bigInteger5, bigInteger1);
      assertSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger3);
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      
      bigIntegerArray1[5] = bigInteger5;
      BigInteger bigInteger6 = BigInteger.valueOf(1L);
      assertEquals((byte)1, bigInteger6.byteValue());
      assertEquals((short)1, bigInteger6.shortValue());
      assertNotNull(bigInteger6);
      assertSame(bigInteger6, bigInteger4);
      assertSame(bigInteger6, bigInteger1);
      assertSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger0);
      assertSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger3);
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      
      bigIntegerArray1[6] = bigInteger6;
      bigIntegerArray0[0] = bigIntegerArray1;
      Matrix<BigInteger> matrix1 = new Matrix<BigInteger>((-799), (-799), bigIntegerArray0);
      assertEquals((-799), matrix1.getRows());
      assertEquals((-799), matrix1.getCols());
      assertEquals(1, bigIntegerArray0.length);
      assertNotNull(matrix1);
      
      Matrix<BigInteger> matrix2 = matrix0.add(matrix1);
      assertEquals((-799), matrix0.getCols());
      assertEquals((-799), matrix0.getRows());
      assertEquals((-799), matrix1.getRows());
      assertEquals((-799), matrix1.getCols());
      assertEquals((-799), matrix2.getRows());
      assertEquals((-799), matrix2.getCols());
      assertEquals(1, bigIntegerArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      
      Matrix<BigInteger> matrix3 = matrix2.multiply(matrix0);
      assertEquals((-799), matrix0.getCols());
      assertEquals((-799), matrix0.getRows());
      assertEquals((-799), matrix1.getRows());
      assertEquals((-799), matrix1.getCols());
      assertEquals((-799), matrix2.getRows());
      assertEquals((-799), matrix2.getCols());
      assertEquals((-799), matrix3.getCols());
      assertEquals((-799), matrix3.getRows());
      assertEquals(1, bigIntegerArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      
      Matrix<BigInteger> matrix4 = matrix0.subtract(matrix3);
      assertEquals((-799), matrix0.getCols());
      assertEquals((-799), matrix0.getRows());
      assertEquals((-799), matrix1.getRows());
      assertEquals((-799), matrix1.getCols());
      assertEquals((-799), matrix2.getRows());
      assertEquals((-799), matrix2.getCols());
      assertEquals((-799), matrix3.getCols());
      assertEquals((-799), matrix3.getRows());
      assertEquals((-799), matrix4.getCols());
      assertEquals((-799), matrix4.getRows());
      assertEquals(1, bigIntegerArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix3);
      
      matrix4.copy(matrix1);
      assertEquals((-799), matrix0.getCols());
      assertEquals((-799), matrix0.getRows());
      assertEquals((-799), matrix1.getRows());
      assertEquals((-799), matrix1.getCols());
      assertEquals((-799), matrix2.getRows());
      assertEquals((-799), matrix2.getCols());
      assertEquals((-799), matrix3.getCols());
      assertEquals((-799), matrix3.getRows());
      assertEquals((-799), matrix4.getCols());
      assertEquals((-799), matrix4.getRows());
      assertEquals(1, bigIntegerArray0.length);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix3);
      
      int int0 = (-1);
      Integer[][] integerArray0 = new Integer[9][0];
      Integer[] integerArray1 = new Integer[8];
      Integer integer0 = new Integer((-799));
      assertEquals((-799), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray1[0] = integer0;
      Integer integer1 = new Integer((int) integerArray1[0]);
      assertEquals(8, integerArray1.length);
      assertEquals((-799), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray1[1] = integer1;
      Integer integer2 = new Integer((int) integerArray1[1]);
      assertEquals(8, integerArray1.length);
      assertEquals((-799), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      integerArray1[2] = integer2;
      Integer integer3 = new Integer((int) integerArray1[0]);
      assertEquals(8, integerArray1.length);
      assertEquals((-799), (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      
      integerArray1[3] = integer3;
      Integer integer4 = new Integer(1073);
      assertEquals(1073, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      integerArray1[4] = integer4;
      Integer integer5 = new Integer(1552);
      assertEquals(1552, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      
      integerArray1[5] = integer5;
      Integer integer6 = new Integer((-1));
      assertEquals((-1), (int)integer6);
      assertNotNull(integer6);
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      
      integerArray1[6] = integer6;
      Integer integer7 = new Integer(1073);
      assertEquals(1073, (int)integer7);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      
      integerArray1[7] = integer7;
      integerArray0[0] = integerArray1;
      Integer[] integerArray2 = new Integer[0];
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      integerArray0[1] = integerArray2;
      Integer[] integerArray3 = new Integer[7];
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray2));
      
      integerArray3[0] = integer5;
      integerArray3[1] = integer6;
      integerArray3[2] = integer6;
      integerArray3[3] = integer5;
      integerArray3[4] = integer6;
      integerArray3[5] = integer4;
      integerArray3[6] = integer5;
      integerArray0[2] = integerArray3;
      Integer[] integerArray4 = new Integer[4];
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertFalse(integerArray4.equals((Object)integerArray1));
      assertFalse(integerArray4.equals((Object)integerArray2));
      
      Integer integer8 = new Integer(int0);
      assertEquals((-1), (int)integer8);
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer3));
      assertTrue(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer4));
      
      integerArray4[0] = integer8;
      integerArray4[1] = integer4;
      integerArray4[2] = integer7;
      integerArray4[3] = integer3;
      integerArray0[3] = integerArray4;
      Integer[] integerArray5 = new Integer[4];
      assertFalse(integerArray5.equals((Object)integerArray2));
      assertFalse(integerArray5.equals((Object)integerArray1));
      assertFalse(integerArray5.equals((Object)integerArray4));
      assertFalse(integerArray5.equals((Object)integerArray3));
      
      integerArray5[0] = integer3;
      integerArray5[1] = integer0;
      integerArray5[2] = integer5;
      integerArray5[3] = integer5;
      integerArray0[4] = integerArray5;
      Integer[] integerArray6 = new Integer[9];
      assertFalse(integerArray6.equals((Object)integerArray1));
      assertFalse(integerArray6.equals((Object)integerArray2));
      assertFalse(integerArray6.equals((Object)integerArray4));
      assertFalse(integerArray6.equals((Object)integerArray3));
      assertFalse(integerArray6.equals((Object)integerArray5));
      
      integerArray6[0] = integer2;
      integerArray6[1] = integer0;
      Integer integer9 = new Integer(int0);
      assertEquals((-1), (int)integer9);
      assertNotNull(integer9);
      assertFalse(integer9.equals((Object)integer0));
      assertTrue(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer1));
      assertTrue(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer3));
      assertTrue(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer2));
      
      integerArray6[2] = integer9;
      integerArray6[3] = integer6;
      integerArray6[4] = integer0;
      integerArray6[5] = integer6;
      integerArray6[6] = integer6;
      integerArray6[7] = integer3;
      Integer integer10 = new Integer(0);
      assertEquals(0, (int)integer10);
      assertNotNull(integer10);
      assertFalse(integer10.equals((Object)integer0));
      assertFalse(integer10.equals((Object)integer6));
      assertFalse(integer10.equals((Object)integer9));
      assertFalse(integer10.equals((Object)integer3));
      assertFalse(integer10.equals((Object)integer7));
      assertFalse(integer10.equals((Object)integer2));
      assertFalse(integer10.equals((Object)integer5));
      assertFalse(integer10.equals((Object)integer8));
      assertFalse(integer10.equals((Object)integer1));
      assertFalse(integer10.equals((Object)integer4));
      assertFalse(integer10.equals((Object)int0));
      
      integerArray6[8] = integer10;
      integerArray0[5] = integerArray6;
      Integer[] integerArray7 = new Integer[5];
      assertFalse(integerArray7.equals((Object)integerArray1));
      assertFalse(integerArray7.equals((Object)integerArray4));
      assertFalse(integerArray7.equals((Object)integerArray5));
      assertFalse(integerArray7.equals((Object)integerArray6));
      assertFalse(integerArray7.equals((Object)integerArray3));
      assertFalse(integerArray7.equals((Object)integerArray2));
      
      integerArray7[0] = integer10;
      integerArray7[1] = integer1;
      integerArray7[2] = integer1;
      integerArray7[3] = integer10;
      integerArray7[4] = integer2;
      integerArray0[6] = integerArray7;
      Integer[] integerArray8 = new Integer[3];
      assertFalse(integerArray8.equals((Object)integerArray6));
      assertFalse(integerArray8.equals((Object)integerArray4));
      assertFalse(integerArray8.equals((Object)integerArray3));
      assertFalse(integerArray8.equals((Object)integerArray1));
      assertFalse(integerArray8.equals((Object)integerArray5));
      assertFalse(integerArray8.equals((Object)integerArray7));
      assertFalse(integerArray8.equals((Object)integerArray2));
      
      integerArray8[0] = integer7;
      integerArray8[1] = integer4;
      integerArray8[2] = integer9;
      integerArray0[7] = integerArray8;
      Integer[] integerArray9 = new Integer[1];
      assertFalse(integerArray9.equals((Object)integerArray4));
      assertFalse(integerArray9.equals((Object)integerArray3));
      assertFalse(integerArray9.equals((Object)integerArray5));
      assertFalse(integerArray9.equals((Object)integerArray6));
      assertFalse(integerArray9.equals((Object)integerArray7));
      assertFalse(integerArray9.equals((Object)integerArray1));
      assertFalse(integerArray9.equals((Object)integerArray2));
      assertFalse(integerArray9.equals((Object)integerArray8));
      
      integerArray9[0] = integer5;
      integerArray0[8] = integerArray9;
      Matrix<Integer> matrix5 = new Matrix<Integer>((-799), (-1), integerArray0);
      assertEquals((-1), matrix5.getCols());
      assertEquals((-799), matrix5.getRows());
      assertEquals(9, integerArray0.length);
      assertNotNull(matrix5);
      
      int int1 = matrix5.getRows();
      assertEquals((-1), matrix5.getCols());
      assertEquals((-799), matrix5.getRows());
      assertEquals(9, integerArray0.length);
      assertEquals((-799), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 3);
      assertEquals(0, matrix0.getRows());
      assertEquals(3, matrix0.getCols());
      assertNotNull(matrix0);
      
      Matrix<Integer> matrix1 = new Matrix<Integer>(4, 0, (Integer[][]) null);
      assertEquals(0, matrix1.getCols());
      assertEquals(4, matrix1.getRows());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      // Undeclared exception!
      try { 
        matrix1.multiply(matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(2591, 0);
      assertEquals(0, matrix0.getCols());
      assertEquals(2591, matrix0.getRows());
      assertNotNull(matrix0);
      
      Integer[][] integerArray0 = new Integer[0][8];
      Matrix<Integer> matrix1 = new Matrix<Integer>((-1), 0, integerArray0);
      assertEquals(0, matrix1.getCols());
      assertEquals((-1), matrix1.getRows());
      assertEquals(0, integerArray0.length);
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Integer> matrix2 = matrix0.add(matrix1);
      assertEquals(0, matrix0.getCols());
      assertEquals(2591, matrix0.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals((-1), matrix1.getRows());
      assertEquals(2591, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, integerArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      
      boolean boolean0 = matrix0.equals(matrix1);
      assertEquals(0, matrix0.getCols());
      assertEquals(2591, matrix0.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals((-1), matrix1.getRows());
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      
      boolean boolean1 = matrix1.equals(matrix2);
      assertEquals(0, matrix0.getCols());
      assertEquals(2591, matrix0.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals((-1), matrix1.getRows());
      assertEquals(2591, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, integerArray0.length);
      assertFalse(boolean1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean2 = matrix1.equals(byte0);
      assertEquals(0, matrix1.getCols());
      assertEquals((-1), matrix1.getRows());
      assertEquals(0, integerArray0.length);
      assertFalse(boolean2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Matrix<Integer> matrix3 = matrix0.multiply(matrix2);
      assertEquals(0, matrix0.getCols());
      assertEquals(2591, matrix0.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals((-1), matrix1.getRows());
      assertEquals(2591, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(2591, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, integerArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      
      try { 
        matrix3.identity();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Matrix should be a square
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 20;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(20, 20);
      assertEquals(20, matrix0.getCols());
      assertEquals(20, matrix0.getRows());
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = matrix0.identity();
      assertEquals(20, matrix0.getCols());
      assertEquals(20, matrix0.getRows());
      assertEquals(20, matrix1.getRows());
      assertEquals(20, matrix1.getCols());
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      Matrix<BigInteger> matrix2 = matrix1.identity();
      assertEquals(20, matrix0.getCols());
      assertEquals(20, matrix0.getRows());
      assertEquals(20, matrix1.getRows());
      assertEquals(20, matrix1.getCols());
      assertEquals(20, matrix2.getRows());
      assertEquals(20, matrix2.getCols());
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertTrue(matrix2.equals((Object)matrix1));
      
      boolean boolean0 = matrix1.equals(matrix1);
      assertEquals(20, matrix0.getCols());
      assertEquals(20, matrix0.getRows());
      assertEquals(20, matrix1.getRows());
      assertEquals(20, matrix1.getCols());
      assertTrue(boolean0);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertTrue(matrix1.equals((Object)matrix2));
      
      // Undeclared exception!
      matrix1.multiply(matrix2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 20;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(20, 20);
      assertEquals(20, matrix0.getCols());
      assertEquals(20, matrix0.getRows());
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = matrix0.identity();
      assertEquals(20, matrix0.getCols());
      assertEquals(20, matrix0.getRows());
      assertEquals(20, matrix1.getCols());
      assertEquals(20, matrix1.getRows());
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      Matrix<BigInteger> matrix2 = matrix1.identity();
      assertEquals(20, matrix0.getCols());
      assertEquals(20, matrix0.getRows());
      assertEquals(20, matrix1.getCols());
      assertEquals(20, matrix1.getRows());
      assertEquals(20, matrix2.getRows());
      assertEquals(20, matrix2.getCols());
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertTrue(matrix2.equals((Object)matrix1));
      
      boolean boolean0 = matrix1.equals(matrix1);
      assertEquals(20, matrix0.getCols());
      assertEquals(20, matrix0.getRows());
      assertEquals(20, matrix1.getCols());
      assertEquals(20, matrix1.getRows());
      assertTrue(boolean0);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertTrue(matrix1.equals((Object)matrix2));
      
      // Undeclared exception!
      matrix1.add(matrix2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(2591, 0);
      assertEquals(2591, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertNotNull(matrix0);
      
      Integer[][] integerArray0 = new Integer[0][8];
      Matrix<Integer> matrix1 = new Matrix<Integer>((-1), 0, integerArray0);
      assertEquals(0, matrix1.getCols());
      assertEquals((-1), matrix1.getRows());
      assertEquals(0, integerArray0.length);
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Integer> matrix2 = matrix0.add(matrix1);
      assertEquals(2591, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getCols());
      assertEquals((-1), matrix1.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(2591, matrix2.getRows());
      assertEquals(0, integerArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      Matrix<Integer> matrix3 = matrix0.multiply(matrix2);
      assertEquals(2591, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getCols());
      assertEquals((-1), matrix1.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(2591, matrix2.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(2591, matrix3.getRows());
      assertEquals(0, integerArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      
      Matrix<Integer> matrix4 = matrix3.multiply(matrix1);
      assertEquals(2591, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getCols());
      assertEquals((-1), matrix1.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(2591, matrix2.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(2591, matrix3.getRows());
      assertEquals(2591, matrix4.getRows());
      assertEquals(0, matrix4.getCols());
      assertEquals(0, integerArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix2);
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix3));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix3));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix4.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix3));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = matrix0.identity();
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      Matrix<BigInteger> matrix2 = matrix0.identity();
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertTrue(matrix2.equals((Object)matrix1));
      
      boolean boolean0 = matrix1.equals((Object) null);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertFalse(boolean0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertTrue(matrix1.equals((Object)matrix2));
      
      Matrix<BigInteger> matrix3 = matrix1.add(matrix2);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix3.getRows());
      assertEquals(1, matrix3.getCols());
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      
      Matrix<BigInteger> matrix4 = matrix3.identity();
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix3.getRows());
      assertEquals(1, matrix3.getCols());
      assertEquals(1, matrix4.getRows());
      assertEquals(1, matrix4.getCols());
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix2);
      assertFalse(matrix1.equals((Object)matrix3));
      assertTrue(matrix1.equals((Object)matrix2));
      assertFalse(matrix2.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix2));
      assertFalse(matrix4.equals((Object)matrix3));
      assertTrue(matrix4.equals((Object)matrix1));
      
      Matrix<BigInteger> matrix5 = matrix3.multiply(matrix1);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix3.getRows());
      assertEquals(1, matrix3.getCols());
      assertEquals(1, matrix5.getCols());
      assertEquals(1, matrix5.getRows());
      assertNotNull(matrix5);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix5);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix5);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix5);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix5);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix5, matrix0);
      assertNotSame(matrix5, matrix1);
      assertNotSame(matrix5, matrix4);
      assertNotSame(matrix5, matrix3);
      assertNotSame(matrix5, matrix2);
      assertFalse(matrix1.equals((Object)matrix3));
      assertTrue(matrix1.equals((Object)matrix4));
      assertTrue(matrix1.equals((Object)matrix2));
      assertFalse(matrix2.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix4));
      assertFalse(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix4));
      assertFalse(matrix5.equals((Object)matrix1));
      assertFalse(matrix5.equals((Object)matrix4));
      assertTrue(matrix5.equals((Object)matrix3));
      assertFalse(matrix5.equals((Object)matrix2));
      
      // Undeclared exception!
      try { 
        matrix2.equals(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      Matrix<Double> matrix0 = new Matrix<Double>(0, 0, (Double[][]) null);
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.copy((Matrix<Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[4][7];
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(2721, 63);
      assertEquals(2721, matrix0.getRows());
      assertEquals(63, matrix0.getCols());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.getColumn(2208);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Float[][] floatArray0 = new Float[5][0];
      Float[] floatArray1 = new Float[1];
      Float float0 = new Float((float) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      floatArray0[0] = floatArray1;
      Float[] floatArray2 = new Float[8];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = float0;
      floatArray2[1] = float0;
      Float float1 = new Float((-1275.0));
      assertEquals((-1275.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray2[2] = float1;
      floatArray2[3] = float0;
      floatArray2[4] = float0;
      floatArray2[5] = float0;
      floatArray2[6] = float0;
      floatArray2[7] = float0;
      floatArray0[1] = floatArray2;
      Float[] floatArray3 = new Float[1];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = float0;
      floatArray0[2] = floatArray3;
      Float[] floatArray4 = new Float[0];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray0[3] = floatArray4;
      Float[] floatArray5 = new Float[8];
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray5[0] = float0;
      floatArray5[1] = float1;
      floatArray5[2] = float1;
      Float float2 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray5[3] = float2;
      floatArray5[4] = float1;
      floatArray5[5] = float0;
      floatArray5[6] = float1;
      floatArray5[7] = float0;
      floatArray0[4] = floatArray5;
      Matrix<Float> matrix0 = new Matrix<Float>((-1), (-1), floatArray0);
      assertEquals((-1), matrix0.getRows());
      assertEquals((-1), matrix0.getCols());
      assertEquals(5, floatArray0.length);
      assertNotNull(matrix0);
      
      Float float3 = new Float(1546.6669146765612);
      assertEquals(1546.6669F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      matrix0.set((-1), (-1), float3);
      assertEquals((-1), matrix0.getRows());
      assertEquals((-1), matrix0.getCols());
      assertEquals(5, floatArray0.length);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = matrix0.identity();
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      Matrix<BigInteger> matrix2 = matrix0.identity();
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertTrue(matrix2.equals((Object)matrix1));
      
      boolean boolean0 = matrix1.equals(matrix1);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertTrue(boolean0);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertTrue(matrix1.equals((Object)matrix2));
      
      Matrix<BigInteger> matrix3 = matrix1.add(matrix2);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix3.getCols());
      assertEquals(1, matrix3.getRows());
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix2));
      
      // Undeclared exception!
      try { 
        matrix2.equals(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(249, 249);
      assertEquals(249, matrix0.getCols());
      assertEquals(249, matrix0.getRows());
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = new Matrix<BigInteger>(249, 344);
      assertEquals(249, matrix1.getRows());
      assertEquals(344, matrix1.getCols());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<BigInteger> matrix2 = matrix1.subtract(matrix0);
      assertEquals(249, matrix0.getCols());
      assertEquals(249, matrix0.getRows());
      assertEquals(249, matrix1.getRows());
      assertEquals(344, matrix1.getCols());
      assertEquals(344, matrix2.getCols());
      assertEquals(249, matrix2.getRows());
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix0));
      
      Matrix<BigInteger> matrix3 = matrix0.add(matrix1);
      assertEquals(249, matrix0.getCols());
      assertEquals(249, matrix0.getRows());
      assertEquals(249, matrix1.getRows());
      assertEquals(344, matrix1.getCols());
      assertEquals(249, matrix3.getCols());
      assertEquals(249, matrix3.getRows());
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      
      boolean boolean0 = matrix3.equals(matrix1);
      assertEquals(249, matrix0.getCols());
      assertEquals(249, matrix0.getRows());
      assertEquals(249, matrix1.getRows());
      assertEquals(344, matrix1.getCols());
      assertEquals(249, matrix3.getCols());
      assertEquals(249, matrix3.getRows());
      assertFalse(boolean0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix3));
      assertFalse(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      
      // Undeclared exception!
      try { 
        matrix3.multiply(matrix2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = matrix0.identity();
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      Matrix<BigInteger> matrix2 = matrix0.identity();
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertTrue(matrix2.equals((Object)matrix1));
      
      boolean boolean0 = matrix1.equals((Object) null);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertFalse(boolean0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertTrue(matrix1.equals((Object)matrix2));
      
      Matrix<BigInteger> matrix3 = matrix1.subtract(matrix2);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix3.getCols());
      assertEquals(1, matrix3.getRows());
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix2));
      
      // Undeclared exception!
      try { 
        matrix2.equals(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Matrix<BigDecimal> matrix0 = new Matrix<BigDecimal>(31, 31);
      assertEquals(31, matrix0.getRows());
      assertEquals(31, matrix0.getCols());
      assertNotNull(matrix0);
      
      String string0 = matrix0.toString();
      assertEquals(31, matrix0.getRows());
      assertEquals(31, matrix0.getCols());
      assertNotNull(string0);
      
      Matrix<BigDecimal> matrix1 = matrix0.identity();
      assertEquals(31, matrix0.getRows());
      assertEquals(31, matrix0.getCols());
      assertEquals(31, matrix1.getCols());
      assertEquals(31, matrix1.getRows());
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      // Undeclared exception!
      try { 
        matrix1.getRow((-1676));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = matrix0.identity();
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      Matrix<BigInteger> matrix2 = matrix0.identity();
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertTrue(matrix2.equals((Object)matrix1));
      
      boolean boolean0 = matrix1.equals((Object) null);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertFalse(boolean0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertTrue(matrix1.equals((Object)matrix2));
      
      Matrix<BigInteger> matrix3 = matrix1.add(matrix2);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix3.getRows());
      assertEquals(1, matrix3.getCols());
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix0);
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix2));
      
      // Undeclared exception!
      try { 
        matrix2.equals(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1);
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = matrix0.identity();
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      int int0 = matrix0.getRows();
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertEquals(1, int0);
      assertNotSame(matrix0, matrix1);
      
      Matrix<Float> matrix2 = new Matrix<Float>(1, 1);
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertNotNull(matrix2);
      
      Float[][] floatArray0 = new Float[9][4];
      Float[] floatArray1 = new Float[6];
      Float float0 = new Float(6101.452F);
      assertEquals(6101.452F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      Float float1 = new Float((-1887.788));
      assertEquals((-1887.788F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray1[1] = float1;
      Float float2 = new Float((-1.0));
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray1[2] = float2;
      Float float3 = new Float((-3438.6889557));
      assertEquals((-3438.689F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      floatArray1[3] = float3;
      Float float4 = new Float((-1.0));
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      floatArray1[4] = float4;
      Float float5 = new Float((-1827.5242F));
      assertEquals((-1827.5242F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      floatArray1[5] = float5;
      floatArray0[0] = floatArray1;
      Float[] floatArray2 = new Float[0];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray0[1] = floatArray2;
      Float[] floatArray3 = new Float[9];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = float5;
      Float float6 = new Float((double) floatArray1[5]);
      assertEquals(6, floatArray1.length);
      assertEquals((-1827.5242F), (float)float6, 0.01F);
      assertNotNull(float6);
      assertFalse(floatArray1.equals((Object)floatArray3));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      
      floatArray3[1] = float6;
      Float float7 = new Float((float) floatArray3[1]);
      assertEquals(9, floatArray3.length);
      assertEquals((-1827.5242F), (float)float7, 0.01F);
      assertNotNull(float7);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      
      floatArray3[2] = float7;
      floatArray3[3] = float3;
      floatArray3[4] = float2;
      floatArray3[5] = float5;
      floatArray3[6] = float2;
      floatArray3[7] = float3;
      Float float8 = new Float(187.0608F);
      assertEquals(187.0608F, (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      
      floatArray3[8] = float8;
      floatArray0[2] = floatArray3;
      Float[] floatArray4 = new Float[2];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = float4;
      floatArray4[1] = float5;
      floatArray0[3] = floatArray4;
      Float[] floatArray5 = new Float[3];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = float2;
      floatArray5[1] = float0;
      floatArray5[2] = float8;
      floatArray0[4] = floatArray5;
      Float[] floatArray6 = new Float[3];
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray4));
      
      floatArray6[0] = float7;
      floatArray6[1] = float5;
      floatArray6[2] = float6;
      floatArray0[5] = floatArray6;
      Float[] floatArray7 = new Float[2];
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray2));
      
      floatArray7[0] = float5;
      floatArray7[1] = float2;
      floatArray0[6] = floatArray7;
      Float[] floatArray8 = new Float[8];
      assertFalse(floatArray8.equals((Object)floatArray2));
      assertFalse(floatArray8.equals((Object)floatArray5));
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray3));
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray7));
      assertFalse(floatArray8.equals((Object)floatArray1));
      
      floatArray8[0] = float7;
      Float float9 = new Float((-1.0));
      assertEquals((-1.0F), (float)float9, 0.01F);
      assertNotNull(float9);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      
      floatArray8[1] = float9;
      floatArray8[2] = float3;
      floatArray8[3] = float0;
      floatArray8[4] = float1;
      floatArray8[5] = float6;
      floatArray8[6] = float8;
      floatArray8[7] = float2;
      floatArray0[7] = floatArray8;
      Float[] floatArray9 = new Float[9];
      assertFalse(floatArray9.equals((Object)floatArray1));
      assertFalse(floatArray9.equals((Object)floatArray4));
      assertFalse(floatArray9.equals((Object)floatArray3));
      assertFalse(floatArray9.equals((Object)floatArray7));
      assertFalse(floatArray9.equals((Object)floatArray6));
      assertFalse(floatArray9.equals((Object)floatArray8));
      assertFalse(floatArray9.equals((Object)floatArray2));
      assertFalse(floatArray9.equals((Object)floatArray5));
      
      floatArray9[0] = float0;
      Float float10 = new Float((float) floatArray6[2]);
      assertEquals(3, floatArray6.length);
      assertEquals((-1827.5242F), (float)float10, 0.01F);
      assertNotNull(float10);
      assertNotEquals((float)float10, (float)float8, 0.01F);
      assertNotEquals((float)float10, (float)float0, 0.01F);
      assertNotEquals((float)float10, (float)float2, 0.01F);
      assertNotEquals((float)float10, (float)float4, 0.01F);
      assertEquals((float)float10, (float)float5, 0.01F);
      assertEquals((float)float10, (float)float7, 0.01F);
      assertEquals((float)float10, (float)float6, 0.01F);
      assertNotEquals((float)float10, (float)float9, 0.01F);
      assertNotEquals((float)float10, (float)float1, 0.01F);
      assertNotEquals((float)float10, (float)float3, 0.01F);
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray7));
      assertFalse(floatArray6.equals((Object)floatArray8));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray9));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray4));
      
      floatArray9[1] = float10;
      floatArray9[2] = float7;
      floatArray9[3] = float7;
      floatArray9[4] = float6;
      floatArray9[5] = float3;
      floatArray9[6] = float3;
      floatArray9[7] = float0;
      floatArray9[8] = float6;
      floatArray0[8] = floatArray9;
      Matrix<Float> matrix3 = null;
      try {
        matrix3 = new Matrix<Float>(1, (-1647), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Double[][] doubleArray0 = new Double[3][7];
      Double[] doubleArray1 = new Double[4];
      Double double0 = new Double(1);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(1.0);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(473.4);
      assertEquals(473.4, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray1[2] = double2;
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray1[3] = double3;
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double2;
      doubleArray2[1] = double3;
      doubleArray2[2] = double1;
      doubleArray2[3] = double1;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray2[4] = double4;
      doubleArray2[5] = double3;
      doubleArray2[6] = double3;
      Double double5 = new Double((-1.0));
      assertEquals((-1.0), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      doubleArray2[7] = double5;
      doubleArray2[8] = double0;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = double0;
      doubleArray3[1] = double3;
      doubleArray3[2] = double5;
      doubleArray3[3] = double5;
      doubleArray2[8] = double5;
      doubleArray3[5] = double5;
      doubleArray3[6] = double0;
      doubleArray0[2] = doubleArray3;
      Matrix<Double> matrix0 = new Matrix<Double>(1, 1, doubleArray0);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(3, doubleArray0.length);
      assertNotNull(matrix0);
      
      Matrix<Double> matrix1 = matrix0.identity();
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(3, doubleArray0.length);
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertTrue(matrix1.equals((Object)matrix0));
      
      Matrix<Double> matrix2 = matrix0.multiply(matrix1);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(3, doubleArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      
      Matrix<Double> matrix3 = matrix0.subtract(matrix2);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix3.getCols());
      assertEquals(1, matrix3.getRows());
      assertEquals(3, doubleArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix2));
      
      // Undeclared exception!
      try { 
        matrix3.get((-1553), (-1553));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Float[][] floatArray0 = new Float[9][8];
      Float[] floatArray1 = new Float[8];
      Float float0 = new Float((float) (-579));
      assertEquals((-579.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      Float float1 = new Float(1690.2855F);
      assertEquals(1690.2855F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray1[1] = float1;
      Float float2 = new Float((-1.0));
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray1[2] = float2;
      Float float3 = Float.valueOf((float) (-579));
      assertEquals((-579.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      
      floatArray1[3] = float3;
      Float float4 = new Float(0.0F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      
      floatArray1[4] = float4;
      Float float5 = new Float(0.0F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      floatArray1[5] = float5;
      Float float6 = new Float((double) floatArray1[4]);
      assertEquals(8, floatArray1.length);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      
      floatArray1[6] = float6;
      Float float7 = new Float((double) floatArray1[0]);
      assertEquals(8, floatArray1.length);
      assertEquals((-579.0F), (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      
      floatArray1[7] = float7;
      floatArray0[0] = floatArray1;
      Float[] floatArray2 = new Float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = float2;
      floatArray2[1] = float3;
      floatArray2[2] = float2;
      floatArray2[3] = float2;
      floatArray2[4] = float0;
      floatArray2[5] = float3;
      floatArray2[6] = float4;
      floatArray0[1] = floatArray2;
      Float[] floatArray3 = new Float[4];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = float5;
      floatArray3[1] = float2;
      floatArray3[2] = float0;
      floatArray3[3] = float0;
      floatArray0[2] = floatArray3;
      Float[] floatArray4 = new Float[0];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray0[3] = floatArray4;
      Float[] floatArray5 = new Float[9];
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray5[0] = float2;
      floatArray5[1] = float6;
      floatArray5[2] = float4;
      floatArray5[3] = float1;
      floatArray5[4] = float4;
      floatArray5[5] = float5;
      floatArray5[6] = float1;
      floatArray5[7] = float2;
      floatArray5[8] = float0;
      floatArray0[4] = floatArray5;
      Float[] floatArray6 = new Float[1];
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray4));
      
      floatArray6[0] = float5;
      floatArray0[5] = floatArray6;
      Float[] floatArray7 = new Float[2];
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray5));
      
      floatArray7[0] = float1;
      floatArray7[1] = float4;
      floatArray0[6] = floatArray7;
      Float[] floatArray8 = new Float[1];
      assertFalse(floatArray8.equals((Object)floatArray5));
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray2));
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray7));
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray3));
      
      floatArray8[0] = float0;
      floatArray0[7] = floatArray8;
      Float[] floatArray9 = new Float[4];
      assertFalse(floatArray9.equals((Object)floatArray7));
      assertFalse(floatArray9.equals((Object)floatArray4));
      assertFalse(floatArray9.equals((Object)floatArray3));
      assertFalse(floatArray9.equals((Object)floatArray2));
      assertFalse(floatArray9.equals((Object)floatArray1));
      assertFalse(floatArray9.equals((Object)floatArray6));
      assertFalse(floatArray9.equals((Object)floatArray8));
      assertFalse(floatArray9.equals((Object)floatArray5));
      
      floatArray9[0] = float3;
      floatArray9[1] = float4;
      floatArray9[2] = float1;
      floatArray9[3] = float0;
      floatArray0[8] = floatArray9;
      Matrix<Float> matrix0 = new Matrix<Float>((-579), (-579), floatArray0);
      assertEquals((-579), matrix0.getCols());
      assertEquals((-579), matrix0.getRows());
      assertEquals(9, floatArray0.length);
      assertNotNull(matrix0);
      
      int int0 = matrix0.getCols();
      assertEquals((-579), matrix0.getCols());
      assertEquals((-579), matrix0.getRows());
      assertEquals(9, floatArray0.length);
      assertEquals((-579), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[4][7];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[9];
      Matrix<Float> matrix0 = new Matrix<Float>(2721, 1);
      assertEquals(2721, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertNotNull(matrix0);
      
      Float float0 = matrix0.get(1, 1);
      assertEquals(2721, matrix0.getRows());
      assertEquals(1, matrix0.getCols());
      assertNull(float0);
      
      Matrix<Long> matrix1 = new Matrix<Long>(31, 1551);
      assertEquals(31, matrix1.getRows());
      assertEquals(1551, matrix1.getCols());
      assertNotNull(matrix1);
      
      int int0 = matrix1.getCols();
      assertEquals(31, matrix1.getRows());
      assertEquals(1551, matrix1.getCols());
      assertEquals(1551, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 0);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertNotNull(matrix0);
      
      Matrix<Integer> matrix1 = new Matrix<Integer>(257, 0);
      assertEquals(257, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Integer> matrix2 = matrix0.add(matrix1);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(257, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      Matrix<Integer> matrix3 = matrix0.multiply(matrix2);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(257, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix2));
      
      Matrix<Integer> matrix4 = matrix3.subtract(matrix0);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(257, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix4.getRows());
      assertEquals(0, matrix4.getCols());
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix2);
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix3));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix3));
      assertTrue(matrix4.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix2));
      assertFalse(matrix4.equals((Object)matrix1));
      
      Matrix<Integer> matrix5 = matrix0.add(matrix4);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(257, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix4.getRows());
      assertEquals(0, matrix4.getCols());
      assertEquals(0, matrix5.getRows());
      assertEquals(0, matrix5.getCols());
      assertNotNull(matrix5);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix5);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix1, matrix5);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix5);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix5);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix5);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix5, matrix0);
      assertNotSame(matrix5, matrix1);
      assertNotSame(matrix5, matrix3);
      assertNotSame(matrix5, matrix2);
      assertNotSame(matrix5, matrix4);
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix3));
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix4));
      assertFalse(matrix1.equals((Object)matrix4));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix4));
      assertTrue(matrix2.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix4));
      assertTrue(matrix3.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix3));
      assertTrue(matrix4.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix2));
      assertFalse(matrix4.equals((Object)matrix1));
      assertTrue(matrix5.equals((Object)matrix2));
      assertTrue(matrix5.equals((Object)matrix3));
      assertTrue(matrix5.equals((Object)matrix4));
      assertFalse(matrix5.equals((Object)matrix1));
      assertTrue(matrix5.equals((Object)matrix0));
      
      int int0 = matrix0.getRows();
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, int0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix5);
      assertNotSame(matrix0, matrix4);
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix3));
      assertTrue(matrix0.equals((Object)matrix5));
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix4));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Double[][] doubleArray0 = new Double[8][7];
      Double[] doubleArray1 = new Double[1];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double0;
      doubleArray2[1] = double0;
      doubleArray2[2] = double0;
      doubleArray2[3] = double0;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = double0;
      doubleArray3[1] = double0;
      Double double1 = new Double((double) doubleArray2[0]);
      assertEquals(4, doubleArray2.length);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray3[2] = double1;
      doubleArray3[3] = double0;
      doubleArray3[4] = double0;
      Double double2 = new Double((double) doubleArray1[0]);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      doubleArray3[5] = double2;
      doubleArray3[6] = double0;
      doubleArray3[7] = double0;
      doubleArray0[2] = doubleArray3;
      Double[] doubleArray4 = new Double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = double1;
      Double double3 = new Double((double) doubleArray3[4]);
      assertEquals(8, doubleArray3.length);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray4[1] = double3;
      doubleArray4[2] = double1;
      doubleArray4[3] = double2;
      doubleArray4[4] = double0;
      doubleArray4[5] = double0;
      doubleArray4[6] = double1;
      doubleArray4[7] = double0;
      doubleArray4[8] = double2;
      doubleArray0[3] = doubleArray4;
      Double[] doubleArray5 = new Double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = double3;
      doubleArray5[1] = double0;
      doubleArray0[4] = doubleArray5;
      Double[] doubleArray6 = new Double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      
      doubleArray6[0] = double4;
      doubleArray6[1] = double3;
      doubleArray6[2] = double3;
      Double double5 = new Double((double) doubleArray4[3]);
      assertEquals(9, doubleArray4.length);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray6));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      
      doubleArray6[3] = double5;
      doubleArray6[4] = double2;
      doubleArray6[5] = double0;
      doubleArray6[6] = double3;
      doubleArray6[7] = double3;
      doubleArray6[8] = double0;
      doubleArray0[5] = doubleArray6;
      Double[] doubleArray7 = new Double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = double1;
      doubleArray7[1] = double1;
      doubleArray7[2] = double4;
      Double double6 = new Double((-1211.720306893));
      assertEquals((-1211.720306893), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      
      doubleArray7[3] = double6;
      doubleArray0[6] = doubleArray7;
      Double[] doubleArray8 = new Double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = double4;
      doubleArray0[7] = doubleArray8;
      Matrix<Double> matrix0 = new Matrix<Double>(0, (-270), doubleArray0);
      assertEquals((-270), matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(8, doubleArray0.length);
      assertNotNull(matrix0);
      
      matrix0.hashCode();
      assertEquals((-270), matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Double[][] doubleArray0 = new Double[8][9];
      Double[] doubleArray1 = new Double[2];
      Double double0 = new Double(1107);
      assertEquals(1107.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(1107);
      assertEquals(1107.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double1;
      doubleArray2[1] = double0;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = double1;
      doubleArray3[1] = double0;
      doubleArray3[2] = double0;
      doubleArray3[3] = double0;
      doubleArray3[4] = double1;
      doubleArray3[5] = double1;
      doubleArray3[6] = double0;
      doubleArray3[7] = double0;
      doubleArray0[2] = doubleArray3;
      Double[] doubleArray4 = new Double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = double1;
      doubleArray4[1] = double1;
      doubleArray4[0] = double0;
      Double double2 = new Double((double) doubleArray3[3]);
      assertEquals(8, doubleArray3.length);
      assertEquals(1107.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray4[3] = double2;
      doubleArray4[4] = double1;
      doubleArray0[3] = doubleArray4;
      Double[] doubleArray5 = new Double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray5[0] = double3;
      doubleArray0[4] = doubleArray5;
      Double[] doubleArray6 = new Double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = double2;
      doubleArray0[5] = doubleArray6;
      Double[] doubleArray7 = new Double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = double0;
      doubleArray7[1] = double0;
      Double double4 = new Double((double) doubleArray2[1]);
      assertEquals(2, doubleArray2.length);
      assertEquals(1107.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray6));
      assertFalse(doubleArray2.equals((Object)doubleArray7));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray7[2] = double4;
      doubleArray7[3] = double1;
      doubleArray0[6] = doubleArray7;
      Double[] doubleArray8 = new Double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = double2;
      Double double5 = new Double((double) doubleArray6[0]);
      assertEquals(1, doubleArray6.length);
      assertEquals(1107.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray8));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray7));
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray8[1] = double5;
      Double double6 = new Double((-1122.958631061939));
      assertEquals((-1122.958631061939), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      
      doubleArray8[2] = double6;
      Double double7 = new Double((-1626.0));
      assertEquals((-1626.0), (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      
      doubleArray8[3] = double7;
      doubleArray8[4] = double0;
      doubleArray8[5] = double3;
      doubleArray8[6] = double3;
      doubleArray0[6] = doubleArray8;
      Matrix<Double> matrix0 = new Matrix<Double>(1107, 0, doubleArray0);
      assertEquals(0, matrix0.getCols());
      assertEquals(1107, matrix0.getRows());
      assertEquals(8, doubleArray0.length);
      assertNotNull(matrix0);
      
      Matrix<Double> matrix1 = new Matrix<Double>(0, 0);
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Double> matrix2 = matrix0.multiply(matrix1);
      assertEquals(0, matrix0.getCols());
      assertEquals(1107, matrix0.getRows());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getCols());
      assertEquals(1107, matrix2.getRows());
      assertEquals(8, doubleArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      
      Matrix<Double> matrix3 = matrix0.subtract(matrix2);
      assertEquals(0, matrix0.getCols());
      assertEquals(1107, matrix0.getRows());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getCols());
      assertEquals(1107, matrix2.getRows());
      assertEquals(1107, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(8, doubleArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix2));
      assertTrue(matrix3.equals((Object)matrix0));
      
      Matrix<Double> matrix4 = matrix0.add(matrix3);
      assertEquals(0, matrix0.getCols());
      assertEquals(1107, matrix0.getRows());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getCols());
      assertEquals(1107, matrix2.getRows());
      assertEquals(1107, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix4.getCols());
      assertEquals(1107, matrix4.getRows());
      assertEquals(8, doubleArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix0);
      assertTrue(matrix0.equals((Object)matrix3));
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix3));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix2));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix3));
      assertFalse(matrix4.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix2));
      
      boolean boolean0 = matrix4.equals(doubleArray4[2]);
      assertEquals(0, matrix0.getCols());
      assertEquals(1107, matrix0.getRows());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getCols());
      assertEquals(1107, matrix2.getRows());
      assertEquals(1107, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix4.getCols());
      assertEquals(1107, matrix4.getRows());
      assertEquals(8, doubleArray0.length);
      assertEquals(5, doubleArray4.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray8);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray6);
      assertNotSame(doubleArray4, doubleArray7);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix0);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray8));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray6));
      assertFalse(doubleArray4.equals((Object)doubleArray7));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertTrue(matrix0.equals((Object)matrix3));
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix4));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix4));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix4));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix4));
      assertTrue(matrix3.equals((Object)matrix2));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix3));
      assertFalse(matrix4.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix2));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][7];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[9];
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '0';
      charArray0[2] = 'a';
      Matrix<Double> matrix0 = new Matrix<Double>(63, 2721);
      assertEquals(63, matrix0.getRows());
      assertEquals(2721, matrix0.getCols());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      matrix0.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Matrix<BigDecimal> matrix0 = new Matrix<BigDecimal>(31, 31);
      assertEquals(31, matrix0.getCols());
      assertEquals(31, matrix0.getRows());
      assertNotNull(matrix0);
      
      Matrix<BigDecimal> matrix1 = matrix0.identity();
      assertEquals(31, matrix0.getCols());
      assertEquals(31, matrix0.getRows());
      assertEquals(31, matrix1.getRows());
      assertEquals(31, matrix1.getCols());
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      // Undeclared exception!
      try { 
        matrix1.equals(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Double[][] doubleArray0 = new Double[8][9];
      Double[] doubleArray1 = new Double[2];
      Double double0 = new Double(1107);
      assertEquals(1107.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(1107);
      assertEquals(1107.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double1;
      doubleArray2[1] = double0;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = double1;
      doubleArray3[1] = double0;
      doubleArray3[2] = double0;
      doubleArray3[3] = double0;
      doubleArray3[4] = double1;
      doubleArray3[5] = double1;
      doubleArray3[6] = double0;
      doubleArray3[7] = double0;
      doubleArray0[2] = doubleArray3;
      Double[] doubleArray4 = new Double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = double1;
      doubleArray4[1] = double1;
      doubleArray4[2] = double0;
      Double double2 = new Double((double) doubleArray3[3]);
      assertEquals(8, doubleArray3.length);
      assertEquals(1107.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      
      doubleArray4[3] = double2;
      doubleArray4[4] = double1;
      doubleArray0[3] = doubleArray4;
      Double[] doubleArray5 = new Double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray5[0] = double3;
      doubleArray0[4] = doubleArray5;
      Double[] doubleArray6 = new Double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = double2;
      doubleArray0[5] = doubleArray6;
      Double[] doubleArray7 = new Double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = double0;
      doubleArray7[1] = double0;
      Double double4 = new Double((double) doubleArray2[1]);
      assertEquals(2, doubleArray2.length);
      assertEquals(1107.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray7));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray6));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray7[2] = double4;
      doubleArray7[3] = double1;
      doubleArray0[6] = doubleArray7;
      Double[] doubleArray8 = new Double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray8[0] = double2;
      Double double5 = new Double((double) doubleArray6[0]);
      assertEquals(1, doubleArray6.length);
      assertEquals(1107.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray7));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray8));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      
      doubleArray8[1] = double5;
      Double double6 = new Double((-1122.958631061939));
      assertEquals((-1122.958631061939), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      
      doubleArray8[2] = double6;
      Double double7 = new Double((-1626.0));
      assertEquals((-1626.0), (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      
      doubleArray8[3] = double7;
      doubleArray8[4] = double0;
      doubleArray8[5] = double3;
      doubleArray8[6] = double3;
      doubleArray0[7] = doubleArray8;
      Matrix<Double> matrix0 = new Matrix<Double>(1107, 0, doubleArray0);
      assertEquals(1107, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(8, doubleArray0.length);
      assertNotNull(matrix0);
      
      Matrix<Double> matrix1 = new Matrix<Double>(0, 0);
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Double> matrix2 = matrix0.multiply(matrix1);
      assertEquals(1107, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(1107, matrix2.getRows());
      assertEquals(8, doubleArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      Matrix<Double> matrix3 = matrix0.subtract(matrix2);
      assertEquals(1107, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(1107, matrix2.getRows());
      assertEquals(1107, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(8, doubleArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      
      Matrix<Double> matrix4 = matrix0.add(matrix3);
      assertEquals(1107, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(1107, matrix2.getRows());
      assertEquals(1107, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix4.getCols());
      assertEquals(1107, matrix4.getRows());
      assertEquals(8, doubleArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix1);
      assertTrue(matrix0.equals((Object)matrix3));
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix3));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix3));
      assertFalse(matrix4.equals((Object)matrix1));
      
      boolean boolean0 = matrix4.equals(doubleArray4[2]);
      assertEquals(1107, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(1107, matrix2.getRows());
      assertEquals(1107, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix4.getCols());
      assertEquals(1107, matrix4.getRows());
      assertEquals(8, doubleArray0.length);
      assertEquals(5, doubleArray4.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray4, doubleArray8);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray6);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray7);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix1);
      assertFalse(doubleArray4.equals((Object)doubleArray8));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray6));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray7));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertTrue(matrix0.equals((Object)matrix3));
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix4));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix3));
      assertFalse(matrix1.equals((Object)matrix4));
      assertTrue(matrix2.equals((Object)matrix4));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix3));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix2));
      assertTrue(matrix3.equals((Object)matrix4));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix3));
      assertFalse(matrix4.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Matrix<Float> matrix0 = new Matrix<Float>(0, 0);
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertNotNull(matrix0);
      
      Float[][] floatArray0 = new Float[7][7];
      Float[] floatArray1 = new Float[1];
      Float float0 = new Float((-2527.2334F));
      assertEquals((-2527.2334F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      floatArray0[0] = floatArray1;
      Float[] floatArray2 = new Float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = float0;
      floatArray2[1] = float0;
      floatArray2[2] = float0;
      floatArray2[3] = float0;
      Float float1 = new Float((float) floatArray1[0]);
      assertEquals(1, floatArray1.length);
      assertEquals((-2527.2334F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray2[4] = float1;
      floatArray0[1] = floatArray2;
      Float[] floatArray3 = new Float[8];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      Float float2 = new Float((float) floatArray2[3]);
      assertEquals(5, floatArray2.length);
      assertEquals((-2527.2334F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      floatArray3[0] = float2;
      floatArray3[1] = float0;
      floatArray3[2] = float1;
      floatArray3[3] = float0;
      floatArray3[4] = float1;
      floatArray3[5] = float0;
      floatArray3[6] = float1;
      floatArray3[7] = float0;
      floatArray0[2] = floatArray3;
      Float[] floatArray4 = new Float[2];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = float2;
      Float float3 = new Float(0.0);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      floatArray4[1] = float3;
      floatArray0[3] = floatArray4;
      Float[] floatArray5 = new Float[7];
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray5[0] = float0;
      floatArray5[1] = float1;
      floatArray5[2] = float3;
      floatArray5[3] = float2;
      floatArray5[4] = float1;
      floatArray5[5] = float3;
      floatArray5[6] = float2;
      floatArray0[4] = floatArray5;
      Float[] floatArray6 = new Float[0];
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray1));
      
      floatArray0[5] = floatArray6;
      Float[] floatArray7 = new Float[3];
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray6));
      
      floatArray7[0] = float0;
      floatArray7[1] = float2;
      floatArray7[2] = float3;
      floatArray0[6] = floatArray7;
      Matrix<Float> matrix1 = new Matrix<Float>(0, 1, floatArray0);
      assertEquals(0, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(7, floatArray0.length);
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Float> matrix2 = matrix0.multiply(matrix1);
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix2.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(7, floatArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      
      Matrix<Float> matrix3 = matrix2.subtract(matrix1);
      assertEquals(1, matrix3.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix2.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(7, floatArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertTrue(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)matrix2));
      assertTrue(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      
      Matrix<Float> matrix4 = matrix0.add(matrix3);
      assertEquals(1, matrix3.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix4.getCols());
      assertEquals(0, matrix4.getRows());
      assertEquals(0, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix2.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(7, floatArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertTrue(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)matrix3));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)matrix2));
      assertFalse(matrix4.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix0));
      assertFalse(matrix4.equals((Object)matrix2));
      assertFalse(matrix4.equals((Object)matrix3));
      assertTrue(matrix1.equals((Object)matrix3));
      assertTrue(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix3));
      
      Matrix<Float> matrix5 = matrix0.subtract(matrix4);
      assertEquals(1, matrix3.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix4.getCols());
      assertEquals(0, matrix4.getRows());
      assertEquals(0, matrix5.getRows());
      assertEquals(0, matrix5.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix2.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(7, floatArray0.length);
      assertNotNull(matrix5);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix5);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix5);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix5);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix5, matrix4);
      assertNotSame(matrix5, matrix2);
      assertNotSame(matrix5, matrix3);
      assertNotSame(matrix5, matrix0);
      assertNotSame(matrix5, matrix1);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix5);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix5);
      assertTrue(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix4));
      assertFalse(matrix0.equals((Object)matrix3));
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix4));
      assertFalse(matrix0.equals((Object)matrix2));
      assertFalse(matrix4.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix0));
      assertFalse(matrix4.equals((Object)matrix2));
      assertFalse(matrix4.equals((Object)matrix3));
      assertTrue(matrix5.equals((Object)matrix0));
      assertFalse(matrix5.equals((Object)matrix2));
      assertFalse(matrix5.equals((Object)matrix3));
      assertFalse(matrix5.equals((Object)matrix1));
      assertTrue(matrix5.equals((Object)matrix4));
      assertTrue(matrix1.equals((Object)matrix3));
      assertFalse(matrix1.equals((Object)matrix4));
      assertTrue(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix4));
      assertFalse(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix3));
      
      Float float4 = new Float((double) 0);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      // Undeclared exception!
      try { 
        matrix0.set(0, 0, float4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Matrix<Short> matrix0 = new Matrix<Short>(31, 31);
      assertEquals(31, matrix0.getRows());
      assertEquals(31, matrix0.getCols());
      assertNotNull(matrix0);
      
      Short[][] shortArray0 = new Short[6][4];
      Short[] shortArray1 = new Short[0];
      shortArray0[0] = shortArray1;
      Short[] shortArray2 = new Short[6];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
      
      shortArray2[0] = short0;
      short short1 = (short)0;
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray2[1] = short2;
      Short short3 = new Short(short1);
      assertEquals((short)0, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      
      shortArray2[2] = short3;
      Short short4 = new Short(short1);
      assertEquals((short)0, (short)short4);
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      
      shortArray2[3] = short4;
      Short short5 = new Short((short)0);
      assertEquals((short)0, (short)short5);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short1));
      
      shortArray2[4] = short5;
      Short short6 = new Short(short1);
      assertEquals((short)0, (short)short6);
      assertNotNull(short6);
      assertTrue(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertTrue(short6.equals((Object)short2));
      assertTrue(short6.equals((Object)short5));
      assertTrue(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short4));
      
      shortArray2[5] = short6;
      shortArray0[1] = shortArray2;
      Short[] shortArray3 = new Short[4];
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      
      Short short7 = new Short(short1);
      assertEquals((short)0, (short)short7);
      assertNotNull(short7);
      assertTrue(short7.equals((Object)short3));
      assertTrue(short7.equals((Object)short4));
      assertTrue(short7.equals((Object)short5));
      assertTrue(short7.equals((Object)short1));
      assertTrue(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short0));
      assertTrue(short7.equals((Object)short6));
      
      shortArray3[0] = short7;
      shortArray3[1] = short5;
      shortArray3[2] = short2;
      shortArray3[3] = short3;
      shortArray0[2] = shortArray3;
      Short[] shortArray4 = new Short[1];
      assertFalse(shortArray4.equals((Object)shortArray2));
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray3));
      
      shortArray4[0] = short3;
      shortArray0[3] = shortArray4;
      Short[] shortArray5 = new Short[7];
      assertFalse(shortArray5.equals((Object)shortArray2));
      assertFalse(shortArray5.equals((Object)shortArray4));
      assertFalse(shortArray5.equals((Object)shortArray1));
      assertFalse(shortArray5.equals((Object)shortArray3));
      
      shortArray5[0] = short0;
      shortArray5[1] = short0;
      shortArray5[2] = short6;
      shortArray5[3] = short7;
      Short short8 = new Short((short)0);
      assertEquals((short)0, (short)short8);
      assertNotNull(short8);
      assertTrue(short8.equals((Object)short6));
      assertTrue(short8.equals((Object)short1));
      assertTrue(short8.equals((Object)short3));
      assertTrue(short8.equals((Object)short4));
      assertTrue(short8.equals((Object)short5));
      assertTrue(short8.equals((Object)short2));
      assertTrue(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short0));
      
      shortArray5[4] = short8;
      shortArray5[5] = short4;
      Short short9 = new Short((short)1);
      assertEquals((short)1, (short)short9);
      assertNotNull(short9);
      assertFalse(short9.equals((Object)short6));
      assertFalse(short9.equals((Object)short1));
      assertFalse(short9.equals((Object)short3));
      assertFalse(short9.equals((Object)short4));
      assertFalse(short9.equals((Object)short5));
      assertFalse(short9.equals((Object)short2));
      assertFalse(short9.equals((Object)short7));
      assertFalse(short9.equals((Object)short8));
      assertTrue(short9.equals((Object)short0));
      
      shortArray5[6] = short9;
      shortArray0[4] = shortArray5;
      Short[] shortArray6 = new Short[7];
      assertFalse(shortArray6.equals((Object)shortArray1));
      assertFalse(shortArray6.equals((Object)shortArray5));
      assertFalse(shortArray6.equals((Object)shortArray3));
      assertFalse(shortArray6.equals((Object)shortArray4));
      assertFalse(shortArray6.equals((Object)shortArray2));
      
      shortArray6[0] = short3;
      shortArray6[1] = short5;
      shortArray6[2] = short7;
      shortArray6[3] = short3;
      shortArray6[4] = short0;
      shortArray6[5] = short9;
      shortArray6[6] = short3;
      shortArray0[5] = shortArray6;
      Matrix<Short> matrix1 = new Matrix<Short>((-412), (-412), shortArray0);
      assertEquals((-412), matrix1.getCols());
      assertEquals((-412), matrix1.getRows());
      assertEquals(6, shortArray0.length);
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Short> matrix2 = matrix0.subtract(matrix1);
      assertEquals(31, matrix0.getRows());
      assertEquals(31, matrix0.getCols());
      assertEquals((-412), matrix1.getCols());
      assertEquals((-412), matrix1.getRows());
      assertEquals(31, matrix2.getCols());
      assertEquals(31, matrix2.getRows());
      assertEquals(6, shortArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      // Undeclared exception!
      try { 
        matrix2.add(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Matrix<Float> matrix0 = new Matrix<Float>((-258), (-258));
      assertEquals((-258), matrix0.getRows());
      assertEquals((-258), matrix0.getCols());
      assertNotNull(matrix0);
      
      Float[][] floatArray0 = new Float[7][6];
      Float[] floatArray1 = new Float[1];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      floatArray0[0] = floatArray1;
      Float[] floatArray2 = new Float[8];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = float0;
      floatArray2[1] = float0;
      floatArray2[2] = float0;
      floatArray2[3] = float0;
      floatArray2[4] = float0;
      Float float1 = new Float((-1970.66616251529));
      assertEquals((-1970.6661F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray2[5] = float1;
      floatArray2[6] = float0;
      floatArray2[7] = float0;
      floatArray0[1] = floatArray2;
      Float[] floatArray3 = new Float[7];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = float1;
      floatArray3[1] = float1;
      floatArray3[2] = float1;
      floatArray3[3] = float0;
      floatArray3[4] = float1;
      floatArray3[5] = float0;
      floatArray3[6] = float1;
      floatArray0[2] = floatArray3;
      Float[] floatArray4 = new Float[3];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = float0;
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray4[1] = float2;
      Float float3 = new Float((double) floatArray3[2]);
      assertEquals(7, floatArray3.length);
      assertEquals((-1970.6661F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray4));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      floatArray4[2] = float3;
      floatArray0[3] = floatArray4;
      Float[] floatArray5 = new Float[2];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray3));
      
      floatArray5[0] = float2;
      floatArray5[1] = float0;
      floatArray0[4] = floatArray5;
      Float[] floatArray6 = new Float[3];
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray5));
      
      floatArray6[0] = float3;
      floatArray6[1] = float2;
      floatArray6[2] = float0;
      floatArray0[5] = floatArray6;
      Float[] floatArray7 = new Float[3];
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray3));
      
      floatArray7[0] = float3;
      floatArray7[1] = float1;
      floatArray7[2] = float0;
      floatArray0[6] = floatArray7;
      Matrix<Float> matrix1 = new Matrix<Float>((-258), (-258), floatArray0);
      assertEquals((-258), matrix1.getRows());
      assertEquals((-258), matrix1.getCols());
      assertEquals(7, floatArray0.length);
      assertNotNull(matrix1);
      
      Matrix<Float> matrix2 = matrix0.add(matrix1);
      assertEquals((-258), matrix2.getRows());
      assertEquals((-258), matrix2.getCols());
      assertEquals((-258), matrix0.getRows());
      assertEquals((-258), matrix0.getCols());
      assertEquals((-258), matrix1.getRows());
      assertEquals((-258), matrix1.getCols());
      assertEquals(7, floatArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      
      Matrix<Float> matrix3 = matrix0.subtract(matrix2);
      assertEquals((-258), matrix2.getRows());
      assertEquals((-258), matrix2.getCols());
      assertEquals((-258), matrix0.getRows());
      assertEquals((-258), matrix0.getCols());
      assertEquals((-258), matrix3.getCols());
      assertEquals((-258), matrix3.getRows());
      assertEquals((-258), matrix1.getRows());
      assertEquals((-258), matrix1.getCols());
      assertEquals(7, floatArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      
      String string0 = matrix3.toString();
      assertEquals((-258), matrix2.getRows());
      assertEquals((-258), matrix2.getCols());
      assertEquals((-258), matrix0.getRows());
      assertEquals((-258), matrix0.getCols());
      assertEquals((-258), matrix3.getCols());
      assertEquals((-258), matrix3.getRows());
      assertEquals((-258), matrix1.getRows());
      assertEquals((-258), matrix1.getCols());
      assertEquals(7, floatArray0.length);
      assertEquals("Matrix:\n", string0);
      assertNotNull(string0);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer[][] integerArray0 = new Integer[1][5];
      Integer[] integerArray1 = new Integer[8];
      Integer integer0 = new Integer(900);
      assertEquals(900, (int)integer0);
      assertNotNull(integer0);
      
      integerArray1[0] = integer0;
      Integer integer1 = new Integer(1161);
      assertEquals(1161, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray1[1] = integer1;
      Integer integer2 = new Integer(1349);
      assertEquals(1349, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray1[2] = integer2;
      Integer integer3 = new Integer((int) integerArray1[0]);
      assertEquals(8, integerArray1.length);
      assertEquals(900, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray1[3] = integer3;
      Integer integer4 = Integer.getInteger("", 5886);
      assertEquals(5886, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      
      integerArray1[4] = integer4;
      Integer integer5 = new Integer(0);
      assertEquals(0, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      
      integerArray1[5] = integer5;
      Integer integer6 = new Integer(0);
      assertEquals(0, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      
      integerArray1[6] = integer6;
      Integer integer7 = new Integer((-1044));
      assertEquals((-1044), (int)integer7);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      
      integerArray1[7] = integer7;
      integerArray0[0] = integerArray1;
      Matrix<Integer> matrix0 = new Matrix<Integer>((-1), (-1044), integerArray0);
      assertEquals((-1), matrix0.getRows());
      assertEquals((-1044), matrix0.getCols());
      assertEquals(1, integerArray0.length);
      assertNotNull(matrix0);
      
      Matrix<Integer> matrix1 = new Matrix<Integer>(0, (int) integerArray1[3]);
      assertEquals(0, matrix1.getRows());
      assertEquals(900, matrix1.getCols());
      assertEquals(8, integerArray1.length);
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      // Undeclared exception!
      try { 
        matrix0.multiply(matrix1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Matrix<Byte> matrix0 = new Matrix<Byte>(434, 0);
      assertEquals(0, matrix0.getCols());
      assertEquals(434, matrix0.getRows());
      assertNotNull(matrix0);
      
      String string0 = matrix0.toString();
      assertEquals(0, matrix0.getCols());
      assertEquals(434, matrix0.getRows());
      assertNotNull(string0);
      
      Matrix<Float> matrix1 = new Matrix<Float>(1, 160);
      assertEquals(1, matrix1.getRows());
      assertEquals(160, matrix1.getCols());
      assertNotNull(matrix1);
      
      Float[][] floatArray0 = new Float[2][0];
      Float[] floatArray1 = new Float[0];
      floatArray0[0] = floatArray1;
      Float[] floatArray2 = new Float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray2[0] = float0;
      Float float1 = new Float((float) 1);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray2[1] = float1;
      Float float2 = new Float((double) floatArray2[1]);
      assertEquals(6, floatArray2.length);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      floatArray2[2] = float2;
      Float float3 = new Float((float) floatArray2[1]);
      assertEquals(6, floatArray2.length);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      floatArray2[3] = float3;
      Float float4 = new Float((float) floatArray2[2]);
      assertEquals(6, floatArray2.length);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      
      floatArray2[4] = float4;
      Float float5 = new Float((float) floatArray2[2]);
      assertEquals(6, floatArray2.length);
      assertEquals(1.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[5] = float5;
      floatArray0[1] = floatArray2;
      Matrix<Float> matrix2 = null;
      try {
        matrix2 = new Matrix<Float>(1, 1318, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 249;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(249, 249);
      assertEquals(249, matrix0.getCols());
      assertEquals(249, matrix0.getRows());
      assertNotNull(matrix0);
      
      int int1 = 344;
      Matrix<BigInteger> matrix1 = new Matrix<BigInteger>(249, 344);
      assertEquals(249, matrix1.getRows());
      assertEquals(344, matrix1.getCols());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<BigInteger> matrix2 = matrix0.add(matrix1);
      assertEquals(249, matrix0.getCols());
      assertEquals(249, matrix0.getRows());
      assertEquals(249, matrix1.getRows());
      assertEquals(344, matrix1.getCols());
      assertEquals(249, matrix2.getCols());
      assertEquals(249, matrix2.getRows());
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      // Undeclared exception!
      try { 
        matrix0.multiply(matrix2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigInteger[][] bigIntegerArray0 = new BigInteger[7][6];
      BigInteger[] bigIntegerArray1 = new BigInteger[1];
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      bigIntegerArray1[0] = bigInteger0;
      bigIntegerArray0[0] = bigIntegerArray1;
      BigInteger[] bigIntegerArray2 = new BigInteger[1];
      assertFalse(bigIntegerArray2.equals((Object)bigIntegerArray1));
      
      bigIntegerArray2[0] = bigInteger0;
      bigIntegerArray0[1] = bigIntegerArray2;
      BigInteger[] bigIntegerArray3 = new BigInteger[8];
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray2));
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray1));
      
      bigIntegerArray3[0] = bigInteger0;
      BigInteger bigInteger1 = BigInteger.ONE;
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      bigIntegerArray3[1] = bigInteger1;
      bigIntegerArray3[2] = bigInteger0;
      bigIntegerArray3[3] = bigInteger0;
      bigIntegerArray3[4] = bigInteger0;
      bigIntegerArray3[6] = bigInteger0;
      bigIntegerArray3[7] = bigInteger0;
      bigIntegerArray0[2] = bigIntegerArray3;
      BigInteger[] bigIntegerArray4 = new BigInteger[4];
      assertFalse(bigIntegerArray4.equals((Object)bigIntegerArray2));
      assertFalse(bigIntegerArray4.equals((Object)bigIntegerArray3));
      assertFalse(bigIntegerArray4.equals((Object)bigIntegerArray1));
      
      bigIntegerArray4[0] = bigInteger1;
      bigIntegerArray4[1] = bigInteger0;
      bigIntegerArray4[2] = bigInteger0;
      bigIntegerArray4[3] = bigInteger0;
      bigIntegerArray0[3] = bigIntegerArray4;
      BigInteger[] bigIntegerArray5 = new BigInteger[4];
      assertFalse(bigIntegerArray5.equals((Object)bigIntegerArray4));
      assertFalse(bigIntegerArray5.equals((Object)bigIntegerArray3));
      assertFalse(bigIntegerArray5.equals((Object)bigIntegerArray2));
      assertFalse(bigIntegerArray5.equals((Object)bigIntegerArray1));
      
      bigIntegerArray5[0] = bigInteger1;
      bigIntegerArray5[1] = bigInteger1;
      bigIntegerArray5[2] = bigInteger0;
      bigIntegerArray5[3] = bigInteger0;
      bigIntegerArray0[4] = bigIntegerArray5;
      BigInteger[] bigIntegerArray6 = new BigInteger[9];
      assertFalse(bigIntegerArray6.equals((Object)bigIntegerArray2));
      assertFalse(bigIntegerArray6.equals((Object)bigIntegerArray4));
      assertFalse(bigIntegerArray6.equals((Object)bigIntegerArray1));
      assertFalse(bigIntegerArray6.equals((Object)bigIntegerArray5));
      assertFalse(bigIntegerArray6.equals((Object)bigIntegerArray3));
      
      bigIntegerArray6[0] = bigInteger0;
      bigIntegerArray6[1] = bigInteger1;
      bigIntegerArray6[2] = bigInteger0;
      bigIntegerArray6[3] = bigInteger1;
      bigIntegerArray6[4] = bigInteger1;
      bigIntegerArray6[5] = bigInteger1;
      BigInteger bigInteger2 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      
      bigIntegerArray6[6] = bigInteger2;
      bigIntegerArray6[7] = bigInteger0;
      BigInteger bigInteger3 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger3.byteValue());
      assertEquals((short)10, bigInteger3.shortValue());
      assertNotNull(bigInteger3);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      
      bigIntegerArray6[8] = bigInteger3;
      bigIntegerArray0[5] = bigIntegerArray6;
      BigInteger[] bigIntegerArray7 = new BigInteger[5];
      assertFalse(bigIntegerArray7.equals((Object)bigIntegerArray1));
      assertFalse(bigIntegerArray7.equals((Object)bigIntegerArray3));
      assertFalse(bigIntegerArray7.equals((Object)bigIntegerArray5));
      assertFalse(bigIntegerArray7.equals((Object)bigIntegerArray4));
      assertFalse(bigIntegerArray7.equals((Object)bigIntegerArray2));
      assertFalse(bigIntegerArray7.equals((Object)bigIntegerArray6));
      
      bigIntegerArray7[0] = bigInteger3;
      bigIntegerArray7[1] = bigInteger0;
      bigIntegerArray7[2] = bigInteger3;
      bigIntegerArray7[3] = bigInteger2;
      bigIntegerArray7[4] = bigInteger2;
      bigIntegerArray0[6] = bigIntegerArray7;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(0, 0, bigIntegerArray0);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(7, bigIntegerArray0.length);
      assertNotNull(matrix0);
      
      Long long0 = Long.valueOf((long) 0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = matrix0.equals(long0);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(7, bigIntegerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Matrix<Short> matrix0 = new Matrix<Short>(0, 0);
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertNotNull(matrix0);
      
      Short[][] shortArray0 = new Short[0][3];
      Matrix<Short> matrix1 = new Matrix<Short>(0, 0, shortArray0);
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, shortArray0.length);
      assertNotNull(matrix1);
      assertTrue(matrix1.equals((Object)matrix0));
      
      Matrix<Short> matrix2 = matrix0.add(matrix1);
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, shortArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      
      Matrix<Short> matrix3 = matrix0.subtract(matrix2);
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals(0, shortArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix2));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix1));
      
      Matrix<Short> matrix4 = matrix3.multiply(matrix1);
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals(0, matrix4.getRows());
      assertEquals(0, matrix4.getCols());
      assertEquals(0, shortArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix2);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix3));
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix1.equals((Object)matrix3));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix2));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix3));
      
      int int0 = matrix4.getCols();
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals(0, matrix4.getRows());
      assertEquals(0, matrix4.getCols());
      assertEquals(0, shortArray0.length);
      assertEquals(0, int0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix2);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix4));
      assertTrue(matrix0.equals((Object)matrix3));
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix1.equals((Object)matrix4));
      assertTrue(matrix1.equals((Object)matrix3));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix4));
      assertTrue(matrix3.equals((Object)matrix4));
      assertTrue(matrix3.equals((Object)matrix2));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix3));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>(0, 0);
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertNotNull(matrix0);
      
      Double[][] doubleArray0 = new Double[7][8];
      Double[] doubleArray1 = new Double[7];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double((-2207.008538285));
      assertEquals((-2207.008538285), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray1[2] = double2;
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray1[3] = double3;
      Double double4 = new Double((double) doubleArray1[0]);
      assertEquals(7, doubleArray1.length);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      
      doubleArray1[4] = double4;
      Double double5 = new Double(1.0);
      assertEquals(1.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      
      doubleArray1[5] = double5;
      Double double6 = new Double(425.0);
      assertEquals(425.0, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      
      doubleArray1[6] = double6;
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double4;
      doubleArray2[1] = double3;
      doubleArray2[2] = double2;
      doubleArray2[3] = double2;
      doubleArray2[4] = double2;
      doubleArray2[5] = double1;
      doubleArray2[6] = double3;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = double1;
      Double double7 = new Double(1.0);
      assertEquals(1.0, (double)double7, 0.01);
      assertNotNull(double7);
      assertEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      
      doubleArray3[1] = double7;
      doubleArray3[2] = double5;
      doubleArray3[3] = double1;
      doubleArray0[2] = doubleArray3;
      Double[] doubleArray4 = new Double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = double1;
      doubleArray4[1] = double5;
      doubleArray4[2] = double3;
      doubleArray0[3] = doubleArray4;
      Double[] doubleArray5 = new Double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = double5;
      doubleArray0[4] = doubleArray5;
      Double[] doubleArray6 = new Double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = double3;
      doubleArray6[1] = double4;
      doubleArray6[2] = double7;
      Double double8 = new Double(0);
      assertEquals(0.0, (double)double8, 0.01);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertEquals((double)double8, (double)double0, 0.01);
      assertEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      
      doubleArray6[3] = double8;
      doubleArray6[4] = double1;
      doubleArray6[5] = double7;
      doubleArray6[6] = double1;
      doubleArray6[7] = double2;
      doubleArray6[8] = double0;
      doubleArray0[5] = doubleArray6;
      Double[] doubleArray7 = new Double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = double0;
      doubleArray0[6] = doubleArray7;
      Matrix<Double> matrix1 = new Matrix<Double>(31, 0, doubleArray0);
      assertEquals(31, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(7, doubleArray0.length);
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Double> matrix2 = matrix0.subtract(matrix1);
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(31, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(7, doubleArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      Matrix<Double> matrix3 = matrix0.add(matrix2);
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(31, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals(7, doubleArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      
      Matrix<Double> matrix4 = matrix3.add(matrix2);
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(31, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals(0, matrix4.getRows());
      assertEquals(0, matrix4.getCols());
      assertEquals(7, doubleArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix1);
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix3));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix3));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix3));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix4.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix3));
      assertTrue(matrix4.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix2));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      Matrix<BigDecimal> matrix0 = new Matrix<BigDecimal>(0, 0);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertNotNull(matrix0);
      
      Matrix<BigDecimal> matrix1 = new Matrix<BigDecimal>(0, 0, (BigDecimal[][]) null);
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertNotNull(matrix1);
      assertTrue(matrix1.equals((Object)matrix0));
      
      Matrix<BigDecimal> matrix2 = matrix0.subtract(matrix1);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix2.getRows());
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      
      String string0 = matrix1.toString();
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals("Matrix:\n", string0);
      assertNotNull(string0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix2));
      
      Matrix<BigDecimal> matrix3 = matrix0.add(matrix2);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix0);
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix2));
      
      boolean boolean0 = matrix3.equals(matrix2);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertTrue(boolean0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix0);
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix3));
      assertTrue(matrix1.equals((Object)matrix3));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix3));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix2));
      
      Matrix<BigDecimal> matrix4 = matrix2.subtract(matrix1);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix4.getCols());
      assertEquals(0, matrix4.getRows());
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix2);
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix3));
      assertTrue(matrix1.equals((Object)matrix3));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix3));
      assertTrue(matrix4.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix3));
      
      Matrix<BigDecimal> matrix5 = matrix1.add(matrix4);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix4.getCols());
      assertEquals(0, matrix4.getRows());
      assertEquals(0, matrix5.getRows());
      assertEquals(0, matrix5.getCols());
      assertNotNull(matrix5);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix5);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix5);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix5);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix5);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix5, matrix4);
      assertNotSame(matrix5, matrix3);
      assertNotSame(matrix5, matrix1);
      assertNotSame(matrix5, matrix2);
      assertNotSame(matrix5, matrix0);
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix3));
      assertTrue(matrix0.equals((Object)matrix4));
      assertTrue(matrix1.equals((Object)matrix3));
      assertTrue(matrix1.equals((Object)matrix4));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix4));
      assertTrue(matrix4.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix0));
      assertTrue(matrix4.equals((Object)matrix3));
      assertTrue(matrix5.equals((Object)matrix2));
      assertTrue(matrix5.equals((Object)matrix0));
      assertTrue(matrix5.equals((Object)matrix4));
      assertTrue(matrix5.equals((Object)matrix1));
      assertTrue(matrix5.equals((Object)matrix3));
      
      try { 
        matrix3.identity();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      Short[][] shortArray0 = new Short[2][2];
      Short[] shortArray1 = new Short[7];
      short short0 = (short) (-2283);
      Short short1 = new Short((short) (-2283));
      assertEquals((short) (-2283), (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray1[0] = short1;
      Short short2 = new Short((short) (-2283));
      assertEquals((short) (-2283), (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray1[1] = short2;
      Short short3 = new Short((short) (-2283));
      assertEquals((short) (-2283), (short)short3);
      assertNotNull(short3);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      
      shortArray1[2] = short3;
      Short short4 = new Short((short) shortArray1[1]);
      assertEquals(7, shortArray1.length);
      assertEquals((short) (-2283), (short)short4);
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short2));
      
      shortArray1[3] = short4;
      Short short5 = new Short((short) (-2283));
      assertEquals((short) (-2283), (short)short5);
      assertNotNull(short5);
      assertTrue(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short0));
      
      shortArray1[4] = short5;
      Short short6 = new Short((short) (-4345));
      assertEquals((short) (-4345), (short)short6);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      
      shortArray1[5] = short6;
      Short short7 = new Short((short)0);
      assertEquals((short)0, (short)short7);
      assertNotNull(short7);
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short5));
      
      shortArray1[6] = short7;
      shortArray0[0] = shortArray1;
      Short[] shortArray2 = new Short[0];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray0[1] = shortArray2;
      Matrix<Short> matrix0 = new Matrix<Short>(0, 0, shortArray0);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(2, shortArray0.length);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.multiply((Matrix<Short>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 31;
      Matrix<Long> matrix0 = new Matrix<Long>(31, 31);
      assertEquals(31, matrix0.getCols());
      assertEquals(31, matrix0.getRows());
      assertNotNull(matrix0);
      
      Matrix<Long> matrix1 = null;
      try {
        matrix1 = new Matrix<Long>(31, 31, (Long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(2591, 1);
      assertEquals(1, matrix0.getCols());
      assertEquals(2591, matrix0.getRows());
      assertNotNull(matrix0);
      
      int int0 = matrix0.getCols();
      assertEquals(1, matrix0.getCols());
      assertEquals(2591, matrix0.getRows());
      assertEquals(1, int0);
      
      Matrix<BigInteger> matrix1 = new Matrix<BigInteger>(0, 1538);
      assertEquals(1538, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertNotNull(matrix1);
      
      BigInteger[][] bigIntegerArray0 = new BigInteger[1][7];
      BigInteger[] bigIntegerArray1 = new BigInteger[8];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bigInteger0);
      
      bigIntegerArray1[0] = bigInteger0;
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      bigIntegerArray1[1] = bigInteger1;
      BigInteger bigInteger2 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger2.byteValue());
      assertEquals((short)10, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      
      bigIntegerArray1[2] = bigInteger2;
      BigInteger bigInteger3 = BigInteger.ONE;
      assertEquals((short)1, bigInteger3.shortValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      
      bigIntegerArray1[3] = bigInteger3;
      BigInteger bigInteger4 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertNotNull(bigInteger4);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger0);
      assertSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      
      bigIntegerArray1[4] = bigInteger4;
      BigInteger bigInteger5 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger5.shortValue());
      assertEquals((byte)0, bigInteger5.byteValue());
      assertNotNull(bigInteger5);
      assertSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger3);
      assertSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger2);
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      
      bigIntegerArray1[5] = bigInteger5;
      BigInteger bigInteger6 = new BigInteger(byteArray0);
      assertEquals((byte)0, bigInteger6.byteValue());
      assertEquals((short)0, bigInteger6.shortValue());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bigInteger6);
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertTrue(bigInteger6.equals((Object)bigInteger0));
      
      bigIntegerArray1[6] = bigInteger6;
      BigInteger bigInteger7 = BigInteger.TEN;
      assertEquals((short)10, bigInteger7.shortValue());
      assertEquals((byte)10, bigInteger7.byteValue());
      assertNotNull(bigInteger7);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotSame(bigInteger7, bigInteger1);
      assertSame(bigInteger7, bigInteger2);
      assertNotSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger4);
      assertFalse(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      
      bigIntegerArray1[7] = bigInteger7;
      bigIntegerArray0[0] = bigIntegerArray1;
      Matrix<BigInteger> matrix2 = null;
      try {
        matrix2 = new Matrix<BigInteger>(1538, 1, bigIntegerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Byte[][] byteArray0 = new Byte[3][1];
      Byte[] byteArray1 = new Byte[0];
      byteArray0[0] = byteArray1;
      Byte[] byteArray2 = new Byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray2[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray2[1] = byte2;
      Byte byte3 = new Byte((byte)113);
      assertEquals((byte)113, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray2[2] = byte3;
      Byte byte4 = new Byte((byte) (-118));
      assertEquals((byte) (-118), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray2[3] = byte4;
      Byte byte5 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      
      byteArray2[4] = byte5;
      Byte byte6 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte6);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte1));
      
      byteArray2[5] = byte6;
      Byte byte7 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte0));
      
      byteArray2[6] = byte7;
      Byte byte8 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte8);
      assertNotNull(byte8);
      assertTrue(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte4));
      
      byteArray2[7] = byte8;
      Byte byte9 = Byte.valueOf((byte)0);
      assertEquals((byte)0, (byte)byte9);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte3));
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte5));
      assertTrue(byte9.equals((Object)byte6));
      assertTrue(byte9.equals((Object)byte1));
      assertTrue(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte2));
      
      byteArray2[8] = byte9;
      byteArray0[1] = byteArray2;
      Byte[] byteArray3 = new Byte[2];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = byte4;
      byteArray3[1] = byte7;
      byteArray0[2] = byteArray3;
      Matrix<Byte> matrix0 = new Matrix<Byte>((-1), (-1), byteArray0);
      assertEquals((-1), matrix0.getRows());
      assertEquals((-1), matrix0.getCols());
      assertEquals(3, byteArray0.length);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Float[][] floatArray0 = new Float[0][7];
      Matrix<Float> matrix0 = new Matrix<Float>(0, 0, floatArray0);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, floatArray0.length);
      assertNotNull(matrix0);
      
      matrix0.hashCode();
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Matrix<BigDecimal> matrix0 = new Matrix<BigDecimal>((-154), (-154));
      assertEquals((-154), matrix0.getRows());
      assertEquals((-154), matrix0.getCols());
      assertNotNull(matrix0);
      
      Matrix<Integer> matrix1 = new Matrix<Integer>((-154), (-154));
      assertEquals((-154), matrix1.getCols());
      assertEquals((-154), matrix1.getRows());
      assertNotNull(matrix1);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        matrix1.set((-1493), (-1), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-1);
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>((-1), (-50));
      assertEquals((-1), matrix0.getRows());
      assertEquals((-50), matrix0.getCols());
      assertNotNull(matrix0);
      
      String string0 = matrix0.toString();
      assertEquals((-1), matrix0.getRows());
      assertEquals((-50), matrix0.getCols());
      assertEquals("Matrix:\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        matrix0.get((-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Matrix<Float> matrix0 = new Matrix<Float>(3290, 0);
      assertEquals(3290, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertNotNull(matrix0);
      
      Float[][] floatArray0 = new Float[9][3];
      Float[] floatArray1 = new Float[1];
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      floatArray0[0] = floatArray1;
      Float[] floatArray2 = new Float[8];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = float0;
      Float float1 = new Float((float) 3290);
      assertEquals(3290.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray2[1] = float1;
      floatArray2[2] = float0;
      floatArray2[3] = float0;
      floatArray2[4] = float0;
      Float float2 = new Float((float) 3290);
      assertEquals(3290.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      floatArray2[5] = float2;
      floatArray2[6] = float0;
      floatArray2[7] = float0;
      floatArray0[1] = floatArray2;
      Float[] floatArray3 = new Float[8];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = float0;
      floatArray3[1] = float1;
      floatArray3[2] = float0;
      floatArray3[3] = float2;
      floatArray3[4] = float0;
      floatArray3[5] = float1;
      floatArray3[6] = float0;
      floatArray3[7] = float2;
      floatArray0[2] = floatArray3;
      Float[] floatArray4 = new Float[3];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = float1;
      floatArray4[1] = float1;
      floatArray4[2] = float0;
      floatArray0[3] = floatArray4;
      Float[] floatArray5 = new Float[1];
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray5[0] = float2;
      floatArray0[4] = floatArray5;
      Float[] floatArray6 = new Float[3];
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray3));
      
      floatArray6[0] = float0;
      floatArray6[1] = float0;
      floatArray6[2] = float2;
      floatArray0[5] = floatArray6;
      Float[] floatArray7 = new Float[6];
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray3));
      
      Float float3 = new Float(2346.289F);
      assertEquals(2346.289F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      floatArray7[0] = float3;
      floatArray7[1] = float0;
      floatArray7[2] = float0;
      floatArray7[3] = float0;
      Float float4 = new Float(0.0F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      
      floatArray7[4] = float4;
      floatArray7[5] = float2;
      floatArray0[6] = floatArray7;
      Float[] floatArray8 = new Float[4];
      assertFalse(floatArray8.equals((Object)floatArray5));
      assertFalse(floatArray8.equals((Object)floatArray3));
      assertFalse(floatArray8.equals((Object)floatArray7));
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray2));
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray6));
      
      floatArray8[0] = float2;
      floatArray8[1] = float1;
      floatArray8[2] = float4;
      floatArray8[3] = float4;
      floatArray0[7] = floatArray8;
      Float[] floatArray9 = new Float[8];
      assertFalse(floatArray9.equals((Object)floatArray6));
      assertFalse(floatArray9.equals((Object)floatArray3));
      assertFalse(floatArray9.equals((Object)floatArray7));
      assertFalse(floatArray9.equals((Object)floatArray8));
      assertFalse(floatArray9.equals((Object)floatArray2));
      assertFalse(floatArray9.equals((Object)floatArray4));
      assertFalse(floatArray9.equals((Object)floatArray1));
      assertFalse(floatArray9.equals((Object)floatArray5));
      
      floatArray9[0] = float0;
      floatArray9[1] = float2;
      floatArray9[2] = float1;
      Float float5 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      
      floatArray9[3] = float5;
      floatArray9[4] = float1;
      floatArray9[5] = float4;
      floatArray9[6] = float0;
      floatArray9[7] = float2;
      floatArray0[8] = floatArray9;
      Matrix<Float> matrix1 = new Matrix<Float>(0, 0, floatArray0);
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(9, floatArray0.length);
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Float> matrix2 = matrix0.subtract(matrix1);
      assertEquals(3290, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(3290, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(9, floatArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      Matrix<Float> matrix3 = matrix0.add(matrix2);
      assertEquals(3290, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(3290, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix3.getCols());
      assertEquals(3290, matrix3.getRows());
      assertEquals(9, floatArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      
      try { 
        matrix3.identity();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Matrix should be a square
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Matrix<Long> matrix0 = new Matrix<Long>(0, 0);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertNotNull(matrix0);
      
      int int0 = (-377);
      Long[][] longArray0 = new Long[6][4];
      Long[] longArray1 = new Long[1];
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      longArray1[0] = long0;
      longArray0[0] = longArray1;
      Long[] longArray2 = new Long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = long0;
      longArray2[1] = long0;
      longArray0[1] = longArray2;
      Long[] longArray3 = new Long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = long0;
      longArray3[1] = long0;
      longArray3[2] = long0;
      longArray3[3] = long0;
      longArray0[2] = longArray3;
      Long[] longArray4 = new Long[5];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = long0;
      longArray4[1] = long0;
      longArray4[2] = long0;
      longArray4[3] = long0;
      long long1 = 0L;
      Long long2 = new Long(0L);
      assertEquals(0L, (long)long2);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      longArray4[4] = long2;
      longArray0[3] = longArray4;
      Long[] longArray5 = new Long[3];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = long2;
      longArray5[1] = long2;
      longArray5[2] = long0;
      longArray0[4] = longArray5;
      Long[] longArray6 = new Long[9];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = long2;
      longArray6[1] = long0;
      longArray6[2] = long2;
      longArray6[3] = long2;
      longArray6[4] = long0;
      longArray6[5] = long2;
      longArray6[6] = long0;
      Long long3 = new Long(long1);
      assertEquals(0L, (long)long3);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      
      longArray6[7] = long3;
      longArray6[8] = long2;
      longArray0[5] = longArray6;
      Matrix<Long> matrix1 = new Matrix<Long>((-377), 0, longArray0);
      assertEquals(0, matrix1.getCols());
      assertEquals((-377), matrix1.getRows());
      assertEquals(6, longArray0.length);
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Long> matrix2 = matrix0.subtract(matrix1);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getCols());
      assertEquals((-377), matrix1.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(6, longArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      Matrix<Long> matrix3 = matrix0.multiply(matrix2);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getCols());
      assertEquals((-377), matrix1.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(6, longArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix2));
      
      Matrix<Long> matrix4 = matrix3.add(matrix0);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getCols());
      assertEquals((-377), matrix1.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix4.getCols());
      assertEquals(0, matrix4.getRows());
      assertEquals(6, longArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix3);
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix3));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix3));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix3));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix2));
      assertFalse(matrix4.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix3));
      assertTrue(matrix4.equals((Object)matrix0));
      
      try { 
        matrix4.identity();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Matrix<Long> matrix0 = new Matrix<Long>((-145), (-145));
      assertEquals((-145), matrix0.getCols());
      assertEquals((-145), matrix0.getRows());
      assertNotNull(matrix0);
      
      Long[][] longArray0 = new Long[8][3];
      Long[] longArray1 = new Long[0];
      longArray0[0] = longArray1;
      Long[] longArray2 = new Long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray2[0] = long1;
      Long long2 = new Long(0);
      assertEquals(0L, (long)long2);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      longArray2[1] = long2;
      Long long3 = new Long((-145));
      assertEquals((-145L), (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      
      longArray2[2] = long3;
      Long long4 = new Long(long0);
      assertEquals(0L, (long)long4);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      
      longArray2[3] = long4;
      longArray0[1] = longArray2;
      Long[] longArray3 = new Long[0];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray0[2] = longArray3;
      Long[] longArray4 = new Long[8];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      Long long5 = new Long(0L);
      assertEquals(0L, (long)long5);
      assertNotNull(long5);
      assertTrue(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long1));
      
      longArray4[0] = long5;
      longArray4[1] = long2;
      longArray4[2] = long1;
      longArray4[3] = long3;
      longArray4[4] = long4;
      longArray4[5] = long3;
      longArray4[6] = long4;
      longArray4[7] = long4;
      longArray0[3] = longArray4;
      Long[] longArray5 = new Long[4];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = long1;
      longArray5[1] = long5;
      longArray5[2] = long1;
      longArray5[3] = long2;
      longArray0[4] = longArray5;
      Long[] longArray6 = new Long[0];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray0[5] = longArray6;
      Long[] longArray7 = new Long[2];
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = long2;
      longArray7[1] = long3;
      longArray0[6] = longArray7;
      Long[] longArray8 = new Long[1];
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray7));
      
      longArray8[0] = long3;
      longArray0[7] = longArray8;
      Matrix<Long> matrix1 = new Matrix<Long>(0, 0, longArray0);
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(8, longArray0.length);
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Long> matrix2 = matrix0.subtract(matrix1);
      assertEquals((-145), matrix0.getCols());
      assertEquals((-145), matrix0.getRows());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals((-145), matrix2.getRows());
      assertEquals((-145), matrix2.getCols());
      assertEquals(8, longArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      Matrix<Long> matrix3 = matrix0.multiply(matrix2);
      assertEquals((-145), matrix0.getCols());
      assertEquals((-145), matrix0.getRows());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals((-145), matrix2.getRows());
      assertEquals((-145), matrix2.getCols());
      assertEquals((-145), matrix3.getCols());
      assertEquals((-145), matrix3.getRows());
      assertEquals(8, longArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      
      try { 
        matrix3.identity();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 1107;
      BigInteger[][] bigIntegerArray0 = new BigInteger[2][9];
      BigInteger[] bigIntegerArray1 = new BigInteger[5];
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      bigIntegerArray1[0] = bigInteger0;
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      bigIntegerArray1[1] = bigInteger1;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      assertEquals((short)8191, bigInteger2.shortValue());
      assertEquals((byte) (-1), bigInteger2.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)31, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      
      bigIntegerArray1[2] = bigInteger2;
      BigInteger bigInteger3 = BigInteger.valueOf((byte) (-1));
      assertEquals((short) (-1), bigInteger3.shortValue());
      assertEquals((byte) (-1), bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      
      bigIntegerArray1[3] = bigInteger3;
      BigInteger bigInteger4 = BigInteger.TEN;
      assertEquals((short)10, bigInteger4.shortValue());
      assertEquals((byte)10, bigInteger4.byteValue());
      assertNotNull(bigInteger4);
      assertNotSame(bigInteger4, bigInteger3);
      assertSame(bigInteger4, bigInteger0);
      assertSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger2);
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      
      bigIntegerArray1[4] = bigInteger4;
      bigIntegerArray0[0] = bigIntegerArray1;
      BigInteger[] bigIntegerArray2 = new BigInteger[1];
      assertFalse(bigIntegerArray2.equals((Object)bigIntegerArray1));
      
      bigIntegerArray2[0] = bigInteger2;
      bigIntegerArray0[1] = bigIntegerArray2;
      Matrix<BigInteger> matrix0 = null;
      try {
        matrix0 = new Matrix<BigInteger>((-203), 1107, bigIntegerArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Long[][] longArray0 = new Long[3][1];
      Long[] longArray1 = new Long[4];
      Long long0 = new Long((-1));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray1[0] = long0;
      long long1 = 1L;
      Long long2 = new Long(1L);
      assertEquals(1L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      longArray1[1] = long2;
      Long long3 = new Long((-1L));
      assertEquals((-1L), (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      
      longArray1[2] = long3;
      Long long4 = new Long((-610L));
      assertEquals((-610L), (long)long4);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      
      longArray1[3] = long4;
      longArray0[0] = longArray1;
      Long[] longArray2 = new Long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = long2;
      longArray2[1] = long2;
      longArray2[2] = long2;
      longArray2[3] = long2;
      longArray2[4] = long2;
      Long long5 = Long.getLong("", (Long) long1);
      assertEquals(1L, (long)long5);
      assertNotNull(long5);
      assertTrue(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      
      longArray2[5] = long5;
      longArray2[6] = long2;
      longArray2[7] = long4;
      longArray2[8] = long3;
      longArray0[1] = longArray2;
      Long[] longArray3 = new Long[5];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      Long long6 = new Long((-1L));
      assertEquals((-1L), (long)long6);
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long4));
      assertTrue(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertTrue(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long2));
      
      longArray3[0] = long6;
      longArray3[1] = long3;
      longArray3[2] = long5;
      longArray3[3] = long4;
      longArray3[4] = long3;
      longArray0[2] = longArray3;
      Matrix<Long> matrix0 = new Matrix<Long>((-1), (-208), longArray0);
      assertEquals((-1), matrix0.getRows());
      assertEquals((-208), matrix0.getCols());
      assertEquals(3, longArray0.length);
      assertNotNull(matrix0);
      
      Matrix<Long> matrix1 = new Matrix<Long>((-3306), (-144));
      assertEquals((-3306), matrix1.getRows());
      assertEquals((-144), matrix1.getCols());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Long> matrix2 = matrix0.subtract(matrix1);
      assertEquals((-1), matrix0.getRows());
      assertEquals((-208), matrix0.getCols());
      assertEquals((-3306), matrix1.getRows());
      assertEquals((-144), matrix1.getCols());
      assertEquals((-1), matrix2.getRows());
      assertEquals((-208), matrix2.getCols());
      assertEquals(3, longArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      // Undeclared exception!
      try { 
        matrix2.getRow(708);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 1;
      int int1 = 541;
      Matrix<Double> matrix0 = new Matrix<Double>(1, 541);
      assertEquals(541, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertNotNull(matrix0);
      
      Double[][] doubleArray0 = new Double[9][4];
      Double[] doubleArray1 = new Double[8];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double((-4322.014073998565));
      assertEquals((-4322.014073998565), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray1[2] = double2;
      Double double3 = new Double(0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray1[3] = double3;
      Double double4 = new Double(823);
      assertEquals(823.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray1[4] = double4;
      Double double5 = new Double(1.0);
      assertEquals(1.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      doubleArray1[5] = double5;
      Double double6 = new Double((double) doubleArray1[1]);
      assertEquals(8, doubleArray1.length);
      assertEquals(0.0, (double)double6, 0.01);
      assertNotNull(double6);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      
      doubleArray1[6] = double6;
      Double double7 = new Double(0.0);
      assertEquals(0.0, (double)double7, 0.01);
      assertNotNull(double7);
      assertEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double1, 0.01);
      
      doubleArray1[7] = double7;
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double3;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = double2;
      doubleArray0[2] = doubleArray3;
      Double[] doubleArray4 = new Double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      Double double8 = new Double((-1062.0));
      assertEquals((-1062.0), (double)double8, 0.01);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      
      doubleArray4[0] = double8;
      doubleArray4[1] = double5;
      doubleArray0[3] = doubleArray4;
      Double[] doubleArray5 = new Double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = double5;
      doubleArray0[4] = doubleArray5;
      Double[] doubleArray6 = new Double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = double6;
      doubleArray6[1] = double3;
      doubleArray6[2] = double6;
      doubleArray6[3] = double6;
      doubleArray6[4] = double5;
      doubleArray6[5] = double8;
      doubleArray6[6] = double5;
      doubleArray6[7] = double5;
      doubleArray0[5] = doubleArray6;
      Double[] doubleArray7 = new Double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = double3;
      doubleArray7[1] = double5;
      doubleArray7[2] = double5;
      doubleArray7[3] = double4;
      doubleArray7[4] = double7;
      doubleArray7[5] = double1;
      doubleArray7[6] = double2;
      doubleArray7[7] = double0;
      doubleArray0[6] = doubleArray7;
      Double[] doubleArray8 = new Double[9];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray8[0] = double6;
      doubleArray8[1] = double8;
      doubleArray8[2] = double2;
      doubleArray8[3] = double0;
      doubleArray8[4] = double5;
      doubleArray8[5] = double2;
      doubleArray8[6] = double7;
      doubleArray8[7] = double7;
      doubleArray8[8] = double2;
      doubleArray0[7] = doubleArray8;
      Double[] doubleArray9 = new Double[2];
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      
      doubleArray9[0] = double6;
      doubleArray9[1] = double0;
      doubleArray0[8] = doubleArray9;
      Matrix<Double> matrix1 = new Matrix<Double>(823, 0, doubleArray0);
      assertEquals(0, matrix1.getCols());
      assertEquals(823, matrix1.getRows());
      assertEquals(9, doubleArray0.length);
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Double> matrix2 = matrix0.add(matrix1);
      assertEquals(541, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(823, matrix1.getRows());
      assertEquals(1, matrix2.getRows());
      assertEquals(541, matrix2.getCols());
      assertEquals(9, doubleArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      // Undeclared exception!
      try { 
        matrix0.add(matrix2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>((-718), (-718));
      assertEquals((-718), matrix0.getCols());
      assertEquals((-718), matrix0.getRows());
      assertNotNull(matrix0);
      
      String string0 = matrix0.toString();
      assertEquals((-718), matrix0.getCols());
      assertEquals((-718), matrix0.getRows());
      assertEquals("Matrix:\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        matrix0.subtract((Matrix<BigInteger>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Double[][] doubleArray0 = new Double[3][7];
      Double[] doubleArray1 = new Double[4];
      Double double0 = new Double(1);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(1.0);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(473.4);
      assertEquals(473.4, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray1[2] = double2;
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray1[3] = double3;
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double2;
      doubleArray2[1] = double3;
      doubleArray2[2] = double1;
      doubleArray2[3] = double1;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray2[4] = double4;
      doubleArray2[5] = double3;
      doubleArray2[6] = double3;
      Double double5 = new Double((-1.0));
      assertEquals((-1.0), (double)double5, 0.01);
      assertNotNull(double5);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray2[7] = double5;
      doubleArray2[8] = double0;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = double0;
      doubleArray3[1] = double3;
      doubleArray3[2] = double5;
      doubleArray3[3] = double5;
      doubleArray3[4] = double5;
      doubleArray3[5] = double5;
      doubleArray3[6] = double0;
      doubleArray0[2] = doubleArray3;
      Matrix<Double> matrix0 = new Matrix<Double>(1, 1, doubleArray0);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(3, doubleArray0.length);
      assertNotNull(matrix0);
      
      Matrix<Double> matrix1 = matrix0.identity();
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(3, doubleArray0.length);
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertTrue(matrix1.equals((Object)matrix0));
      
      Matrix<Double> matrix2 = matrix0.multiply(matrix1);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(3, doubleArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      
      Matrix<Double> matrix3 = matrix2.add(matrix0);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(1, matrix3.getCols());
      assertEquals(1, matrix3.getRows());
      assertEquals(3, doubleArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      
      // Undeclared exception!
      try { 
        matrix3.get((-1553), (-1553));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 1402;
      Matrix<Integer> matrix0 = new Matrix<Integer>(1402, 0);
      assertEquals(0, matrix0.getCols());
      assertEquals(1402, matrix0.getRows());
      assertNotNull(matrix0);
      
      Short short0 = new Short((short)726);
      assertEquals((short)726, (short)short0);
      assertNotNull(short0);
      
      int int1 = Short.toUnsignedInt((short)726);
      assertEquals(726, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = matrix0.equals(short0);
      assertEquals(0, matrix0.getCols());
      assertEquals(1402, matrix0.getRows());
      assertFalse(boolean0);
      
      int int2 = matrix0.getCols();
      assertEquals(0, matrix0.getCols());
      assertEquals(1402, matrix0.getRows());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Matrix<BigInteger> matrix1 = new Matrix<BigInteger>((-47), (-47));
      assertEquals((-47), matrix1.getRows());
      assertEquals((-47), matrix1.getCols());
      assertNotNull(matrix1);
      
      try { 
        matrix1.identity();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 1);
      assertEquals(1, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertNotNull(matrix0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = matrix0.equals(long0);
      assertEquals(1, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertFalse(boolean0);
      
      try { 
        matrix0.identity();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Matrix should be a square
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>(0, (-1));
      assertEquals((-1), matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertNotNull(matrix0);
      
      String string0 = matrix0.toString();
      assertEquals((-1), matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals("Matrix:\n", string0);
      assertNotNull(string0);
      
      try { 
        matrix0.identity();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Matrix should be a square
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigInteger[][] bigIntegerArray0 = new BigInteger[1][6];
      BigInteger[] bigIntegerArray1 = new BigInteger[6];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      bigIntegerArray1[0] = bigInteger0;
      BigInteger bigInteger1 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      bigIntegerArray1[1] = bigInteger1;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      
      bigIntegerArray1[2] = bigInteger2;
      BigInteger bigInteger3 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertTrue(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      
      bigIntegerArray1[3] = bigInteger3;
      BigInteger bigInteger4 = new BigInteger(byteArray0);
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bigInteger4);
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertTrue(bigInteger4.equals((Object)bigInteger2));
      assertTrue(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      
      bigIntegerArray1[4] = bigInteger4;
      BigInteger bigInteger5 = new BigInteger(byteArray0);
      assertEquals((short)0, bigInteger5.shortValue());
      assertEquals((byte)0, bigInteger5.byteValue());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bigInteger5);
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertTrue(bigInteger5.equals((Object)bigInteger4));
      assertTrue(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      
      bigIntegerArray1[5] = bigInteger5;
      bigIntegerArray0[0] = bigIntegerArray1;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>((-394), (-394), bigIntegerArray0);
      assertEquals((-394), matrix0.getRows());
      assertEquals((-394), matrix0.getCols());
      assertEquals(1, bigIntegerArray0.length);
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = new Matrix<BigInteger>(3964, (byte)0);
      assertEquals(3964, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<BigInteger> matrix2 = matrix0.add(matrix1);
      assertEquals((-394), matrix0.getRows());
      assertEquals((-394), matrix0.getCols());
      assertEquals(3964, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals((-394), matrix2.getRows());
      assertEquals((-394), matrix2.getCols());
      assertEquals(1, bigIntegerArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      Matrix<BigInteger> matrix3 = matrix0.multiply(matrix2);
      assertEquals((-394), matrix0.getRows());
      assertEquals((-394), matrix0.getCols());
      assertEquals(3964, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals((-394), matrix2.getRows());
      assertEquals((-394), matrix2.getCols());
      assertEquals((-394), matrix3.getRows());
      assertEquals((-394), matrix3.getCols());
      assertEquals(1, bigIntegerArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      
      Matrix<BigInteger> matrix4 = matrix3.subtract(matrix0);
      assertEquals((-394), matrix0.getRows());
      assertEquals((-394), matrix0.getCols());
      assertEquals(3964, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals((-394), matrix2.getRows());
      assertEquals((-394), matrix2.getCols());
      assertEquals((-394), matrix3.getRows());
      assertEquals((-394), matrix3.getCols());
      assertEquals((-394), matrix4.getRows());
      assertEquals((-394), matrix4.getCols());
      assertEquals(1, bigIntegerArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix3));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix4.equals((Object)matrix1));
      
      // Undeclared exception!
      try { 
        matrix4.getColumn((byte)0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 0;
      Short[][] shortArray0 = new Short[5][0];
      Short[] shortArray1 = new Short[3];
      Short short0 = new Short((short)1731);
      assertEquals((short)1731, (short)short0);
      assertNotNull(short0);
      
      shortArray1[0] = short0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray1[1] = short1;
      Short short2 = new Short((short)2328);
      assertEquals((short)2328, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      shortArray1[2] = short2;
      shortArray0[0] = shortArray1;
      Short[] shortArray2 = new Short[6];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = short1;
      shortArray2[1] = short0;
      Short short3 = new Short((short) shortArray1[0]);
      assertEquals(3, shortArray1.length);
      assertEquals((short)1731, (short)short3);
      assertNotNull(short3);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      
      shortArray2[2] = short3;
      shortArray2[3] = short0;
      Short short4 = new Short((short)0);
      assertEquals((short)0, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short1));
      
      shortArray2[4] = short4;
      shortArray2[5] = short0;
      shortArray0[1] = shortArray2;
      Short[] shortArray3 = new Short[5];
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      
      shortArray3[0] = short2;
      shortArray3[1] = short2;
      shortArray3[2] = short2;
      shortArray3[3] = short1;
      shortArray3[4] = short2;
      shortArray0[2] = shortArray3;
      Short[] shortArray4 = new Short[4];
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray2));
      assertFalse(shortArray4.equals((Object)shortArray3));
      
      shortArray4[0] = short3;
      shortArray4[1] = short0;
      shortArray4[2] = short1;
      shortArray4[3] = short1;
      shortArray0[3] = shortArray4;
      Short[] shortArray5 = new Short[2];
      assertFalse(shortArray5.equals((Object)shortArray3));
      assertFalse(shortArray5.equals((Object)shortArray2));
      assertFalse(shortArray5.equals((Object)shortArray1));
      assertFalse(shortArray5.equals((Object)shortArray4));
      
      shortArray5[0] = short3;
      shortArray5[1] = short2;
      shortArray0[4] = shortArray5;
      Matrix<Short> matrix0 = new Matrix<Short>(0, 0, shortArray0);
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(5, shortArray0.length);
      assertNotNull(matrix0);
      
      try { 
        matrix0.identity();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = (-5134);
      int int1 = 2112;
      Matrix<Integer> matrix0 = null;
      try {
        matrix0 = new Matrix<Integer>((-5134), 2112);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[6][4];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[4];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal((long) 681);
      assertEquals((byte) (-87), bigDecimal2.byteValue());
      assertEquals((short)681, bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal3.byteValue());
      assertEquals((short)1, bigDecimal3.shortValue());
      assertNotNull(bigDecimal3);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertSame(bigDecimal3, bigDecimal0);
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      
      bigDecimalArray1[3] = bigDecimal3;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[4];
      assertFalse(bigDecimalArray2.equals((Object)bigDecimalArray1));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal4 = new BigDecimal(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigDecimal4.shortValue());
      assertEquals((byte)1, bigDecimal4.byteValue());
      assertNotNull(bigDecimal4);
      assertTrue(bigDecimal4.equals((Object)bigDecimal3));
      assertTrue(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      
      bigDecimalArray2[0] = bigDecimal4;
      bigDecimalArray2[1] = bigDecimal3;
      bigDecimalArray2[2] = bigDecimal0;
      BigDecimal bigDecimal5 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal5.shortValue());
      assertEquals((byte)1, bigDecimal5.byteValue());
      assertNotNull(bigDecimal5);
      assertSame(bigDecimal5, bigDecimal0);
      assertNotSame(bigDecimal5, bigDecimal4);
      assertNotSame(bigDecimal5, bigDecimal2);
      assertSame(bigDecimal5, bigDecimal3);
      assertNotSame(bigDecimal5, bigDecimal1);
      assertTrue(bigDecimal5.equals((Object)bigDecimal4));
      assertFalse(bigDecimal5.equals((Object)bigDecimal2));
      assertFalse(bigDecimal5.equals((Object)bigDecimal1));
      
      bigDecimalArray2[3] = bigDecimal5;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[0];
      assertFalse(bigDecimalArray3.equals((Object)bigDecimalArray1));
      assertFalse(bigDecimalArray3.equals((Object)bigDecimalArray2));
      
      bigDecimalArray0[2] = bigDecimalArray3;
      BigDecimal[] bigDecimalArray4 = new BigDecimal[2];
      assertFalse(bigDecimalArray4.equals((Object)bigDecimalArray3));
      assertFalse(bigDecimalArray4.equals((Object)bigDecimalArray1));
      assertFalse(bigDecimalArray4.equals((Object)bigDecimalArray2));
      
      bigDecimalArray4[0] = bigDecimal5;
      bigDecimalArray4[1] = bigDecimal0;
      bigDecimalArray0[3] = bigDecimalArray4;
      BigDecimal[] bigDecimalArray5 = new BigDecimal[6];
      assertFalse(bigDecimalArray5.equals((Object)bigDecimalArray4));
      assertFalse(bigDecimalArray5.equals((Object)bigDecimalArray2));
      assertFalse(bigDecimalArray5.equals((Object)bigDecimalArray1));
      assertFalse(bigDecimalArray5.equals((Object)bigDecimalArray3));
      
      bigDecimalArray5[0] = bigDecimal1;
      bigDecimalArray5[1] = bigDecimal2;
      bigDecimalArray5[2] = bigDecimal5;
      bigDecimalArray5[3] = bigDecimal1;
      bigDecimalArray5[4] = bigDecimal1;
      bigDecimalArray5[5] = bigDecimal2;
      bigDecimalArray0[4] = bigDecimalArray5;
      BigDecimal[] bigDecimalArray6 = new BigDecimal[3];
      assertFalse(bigDecimalArray6.equals((Object)bigDecimalArray5));
      assertFalse(bigDecimalArray6.equals((Object)bigDecimalArray4));
      assertFalse(bigDecimalArray6.equals((Object)bigDecimalArray2));
      assertFalse(bigDecimalArray6.equals((Object)bigDecimalArray1));
      assertFalse(bigDecimalArray6.equals((Object)bigDecimalArray3));
      
      bigDecimalArray6[0] = bigDecimal3;
      bigDecimalArray6[1] = bigDecimal1;
      bigDecimalArray6[2] = bigDecimal4;
      bigDecimalArray0[5] = bigDecimalArray6;
      Matrix<BigDecimal> matrix0 = new Matrix<BigDecimal>(0, 681, bigDecimalArray0);
      assertEquals(681, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(6, bigDecimalArray0.length);
      assertNotNull(matrix0);
      
      Matrix<BigDecimal> matrix1 = new Matrix<BigDecimal>(0, 0);
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<BigDecimal> matrix2 = matrix0.multiply(matrix1);
      assertEquals(681, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(6, bigDecimalArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(matrix2.equals((Object)matrix0));
      
      Matrix<BigDecimal> matrix3 = matrix0.add(matrix2);
      assertEquals(681, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals(681, matrix3.getCols());
      assertEquals(6, bigDecimalArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(matrix2.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      
      Matrix<BigDecimal> matrix4 = matrix3.subtract(matrix2);
      assertEquals(681, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals(681, matrix3.getCols());
      assertEquals(681, matrix4.getCols());
      assertEquals(0, matrix4.getRows());
      assertEquals(6, bigDecimalArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix3);
      assertTrue(matrix0.equals((Object)matrix3));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix3));
      assertFalse(matrix2.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(matrix2.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix3));
      assertTrue(matrix4.equals((Object)matrix0));
      assertFalse(matrix4.equals((Object)matrix1));
      assertFalse(matrix4.equals((Object)matrix2));
      
      try { 
        matrix4.identity();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Matrix should be a square
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Matrix<Float> matrix0 = new Matrix<Float>((-90), (-90));
      assertEquals((-90), matrix0.getCols());
      assertEquals((-90), matrix0.getRows());
      assertNotNull(matrix0);
      
      Double[][] doubleArray0 = new Double[4][8];
      Double[] doubleArray1 = new Double[2];
      Double double0 = Double.valueOf(3626.423776781);
      assertEquals(3626.423776781, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double((-90));
      assertEquals((-90.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double1;
      doubleArray2[1] = double1;
      doubleArray2[2] = double1;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = double0;
      doubleArray3[1] = double0;
      doubleArray3[2] = double0;
      doubleArray3[3] = double0;
      doubleArray3[4] = double1;
      Double double2 = new Double((double) doubleArray1[0]);
      assertEquals(2, doubleArray1.length);
      assertEquals(3626.423776781, (double)double2, 0.01);
      assertNotNull(double2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray3[5] = double2;
      doubleArray3[6] = double0;
      doubleArray0[2] = doubleArray3;
      Double[] doubleArray4 = new Double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = double2;
      doubleArray4[1] = double0;
      Double double3 = new Double((double) doubleArray3[3]);
      assertEquals(7, doubleArray3.length);
      assertEquals(3626.423776781, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray4[2] = double3;
      doubleArray4[3] = double2;
      doubleArray4[4] = double1;
      doubleArray0[3] = doubleArray4;
      Matrix<Double> matrix1 = new Matrix<Double>(0, (-90), doubleArray0);
      assertEquals((-90), matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(4, doubleArray0.length);
      assertNotNull(matrix1);
      
      Matrix<Double> matrix2 = new Matrix<Double>(0, 0);
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertNotNull(matrix2);
      assertFalse(matrix2.equals((Object)matrix1));
      
      Matrix<Double> matrix3 = matrix1.subtract(matrix2);
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals((-90), matrix3.getCols());
      assertEquals((-90), matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(4, doubleArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix2));
      
      Matrix<Double> matrix4 = matrix1.multiply(matrix3);
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(0, matrix3.getRows());
      assertEquals((-90), matrix3.getCols());
      assertEquals(0, matrix4.getRows());
      assertEquals((-90), matrix4.getCols());
      assertEquals((-90), matrix1.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(4, doubleArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertFalse(matrix2.equals((Object)matrix3));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix1));
      assertFalse(matrix4.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix3));
      assertFalse(matrix1.equals((Object)matrix2));
      assertTrue(matrix1.equals((Object)matrix3));
      
      // Undeclared exception!
      try { 
        matrix4.set((-1111), (-1111), doubleArray2[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Matrix<Short> matrix0 = new Matrix<Short>(411, 411);
      assertEquals(411, matrix0.getCols());
      assertEquals(411, matrix0.getRows());
      assertNotNull(matrix0);
      
      Matrix<Short> matrix1 = new Matrix<Short>(411, 0, (Short[][]) null);
      assertEquals(0, matrix1.getCols());
      assertEquals(411, matrix1.getRows());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Short> matrix2 = matrix0.multiply(matrix1);
      assertEquals(411, matrix0.getCols());
      assertEquals(411, matrix0.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(411, matrix1.getRows());
      assertEquals(411, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(matrix2.equals((Object)matrix0));
      
      Matrix<Short> matrix3 = matrix0.subtract(matrix2);
      assertEquals(411, matrix0.getCols());
      assertEquals(411, matrix0.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(411, matrix1.getRows());
      assertEquals(411, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(411, matrix3.getCols());
      assertEquals(411, matrix3.getRows());
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(matrix2.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      
      matrix3.identity();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Matrix<Long> matrix0 = new Matrix<Long>(0, 0);
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.add((Matrix<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>((-2462), 0, (Double[][]) null);
      assertEquals((-2462), matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertNotNull(matrix0);
      
      try { 
        matrix0.identity();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Matrix should be a square
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(709, 0);
      assertEquals(709, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertNotNull(matrix0);
      
      Double[][] doubleArray0 = new Double[6][9];
      Double[] doubleArray1 = new Double[5];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(709);
      assertEquals(709.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray1[2] = double2;
      Double double3 = new Double(709);
      assertEquals(709.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray1[3] = double3;
      Double double4 = new Double((double) doubleArray1[0]);
      assertEquals(5, doubleArray1.length);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      
      doubleArray1[4] = double4;
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double0;
      doubleArray2[1] = double2;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      Double[] doubleArray4 = new Double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = double3;
      Double double5 = new Double(2659.1047);
      assertEquals(2659.1047, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      doubleArray4[1] = double5;
      Double double6 = new Double(0.0);
      assertEquals(0.0, (double)double6, 0.01);
      assertNotNull(double6);
      assertEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      
      doubleArray4[2] = double6;
      doubleArray4[3] = double4;
      doubleArray4[4] = double0;
      doubleArray4[5] = double3;
      doubleArray0[3] = doubleArray4;
      Double[] doubleArray5 = new Double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = double1;
      doubleArray5[1] = double4;
      doubleArray5[2] = double3;
      doubleArray5[3] = double5;
      doubleArray5[4] = double1;
      doubleArray5[5] = double3;
      doubleArray5[6] = double4;
      Double double7 = new Double((double) doubleArray4[2]);
      assertEquals(6, doubleArray4.length);
      assertEquals(0.0, (double)double7, 0.01);
      assertNotNull(double7);
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      
      doubleArray5[7] = double7;
      doubleArray5[8] = double1;
      doubleArray0[4] = doubleArray5;
      Double[] doubleArray6 = new Double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = double6;
      doubleArray6[1] = double6;
      Double double8 = new Double(1.0);
      assertEquals(1.0, (double)double8, 0.01);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      
      doubleArray6[2] = double8;
      doubleArray6[3] = double0;
      doubleArray6[4] = double5;
      doubleArray6[5] = double7;
      doubleArray6[6] = double2;
      doubleArray6[7] = double3;
      doubleArray0[5] = doubleArray6;
      Matrix<Double> matrix1 = null;
      try {
        matrix1 = new Matrix<Double>(1, 709, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 31;
      Matrix<BigDecimal> matrix0 = new Matrix<BigDecimal>(31, 31);
      assertEquals(31, matrix0.getRows());
      assertEquals(31, matrix0.getCols());
      assertNotNull(matrix0);
      
      String string0 = matrix0.toString();
      assertEquals(31, matrix0.getRows());
      assertEquals(31, matrix0.getCols());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        matrix0.add(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(2591, 1);
      assertEquals(1, matrix0.getCols());
      assertEquals(2591, matrix0.getRows());
      assertNotNull(matrix0);
      
      int int0 = matrix0.getCols();
      assertEquals(1, matrix0.getCols());
      assertEquals(2591, matrix0.getRows());
      assertEquals(1, int0);
      
      Matrix<BigInteger> matrix1 = new Matrix<BigInteger>(0, 1538);
      assertEquals(0, matrix1.getRows());
      assertEquals(1538, matrix1.getCols());
      assertNotNull(matrix1);
      
      BigInteger[][] bigIntegerArray0 = new BigInteger[1][7];
      BigInteger[] bigIntegerArray1 = new BigInteger[8];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bigInteger0);
      
      bigIntegerArray1[0] = bigInteger0;
      BigInteger bigInteger1 = BigInteger.ONE;
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      bigIntegerArray1[1] = bigInteger1;
      BigInteger bigInteger2 = BigInteger.TEN;
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      
      bigIntegerArray1[2] = bigInteger2;
      BigInteger bigInteger3 = BigInteger.ONE;
      assertEquals((short)1, bigInteger3.shortValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertNotSame(bigInteger3, bigInteger0);
      assertSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      
      bigIntegerArray1[3] = bigInteger3;
      BigInteger bigInteger4 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertNotNull(bigInteger4);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      
      bigIntegerArray1[4] = bigInteger4;
      BigInteger bigInteger5 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger5.shortValue());
      assertEquals((byte)0, bigInteger5.byteValue());
      assertNotNull(bigInteger5);
      assertNotSame(bigInteger5, bigInteger1);
      assertSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger3);
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      
      bigIntegerArray1[5] = bigInteger5;
      BigInteger bigInteger6 = new BigInteger(byteArray0);
      assertEquals((byte)0, bigInteger6.byteValue());
      assertEquals((short)0, bigInteger6.shortValue());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bigInteger6);
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertTrue(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      
      bigIntegerArray1[6] = bigInteger6;
      BigInteger bigInteger7 = BigInteger.TEN;
      assertEquals((short)10, bigInteger7.shortValue());
      assertEquals((byte)10, bigInteger7.byteValue());
      assertNotNull(bigInteger7);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger3);
      assertSame(bigInteger7, bigInteger2);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger1);
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      
      bigIntegerArray1[7] = bigInteger7;
      bigIntegerArray0[0] = bigIntegerArray1;
      Matrix<BigInteger> matrix2 = null;
      try {
        matrix2 = new Matrix<BigInteger>(1538, 1, bigIntegerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Double[][] doubleArray0 = new Double[8][9];
      Double[] doubleArray1 = new Double[2];
      Double double0 = new Double(1107);
      assertEquals(1107.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(1107);
      assertEquals(1107.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double1;
      doubleArray2[1] = double0;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = double1;
      doubleArray3[1] = double0;
      doubleArray3[2] = double0;
      doubleArray3[3] = double0;
      doubleArray3[4] = double1;
      doubleArray3[5] = double1;
      doubleArray3[6] = double0;
      doubleArray3[7] = double0;
      doubleArray0[2] = doubleArray3;
      Double[] doubleArray4 = new Double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = double1;
      doubleArray4[1] = double1;
      doubleArray4[0] = double0;
      Double double2 = new Double((double) doubleArray3[3]);
      assertEquals(8, doubleArray3.length);
      assertEquals(1107.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      
      doubleArray4[3] = double2;
      doubleArray4[4] = double1;
      doubleArray0[3] = doubleArray4;
      Double[] doubleArray5 = new Double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray5[0] = double3;
      doubleArray0[4] = doubleArray5;
      Double[] doubleArray6 = new Double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = double2;
      doubleArray0[5] = doubleArray6;
      Double[] doubleArray7 = new Double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = double0;
      doubleArray7[1] = double0;
      Double double4 = new Double((double) doubleArray2[1]);
      assertEquals(2, doubleArray2.length);
      assertEquals(1107.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray6));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray7));
      
      doubleArray7[2] = double4;
      doubleArray7[3] = double1;
      doubleArray0[6] = doubleArray7;
      Double double5 = new Double((double) doubleArray6[0]);
      assertEquals(1, doubleArray6.length);
      assertEquals(1107.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray7));
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      
      Double double6 = new Double((-1122.958631061939));
      assertEquals((-1122.958631061939), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      
      Double double7 = new Double((-1626.0));
      assertEquals((-1626.0), (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      
      doubleArray0[6] = doubleArray4;
      Matrix<Double> matrix0 = new Matrix<Double>(1107, 0, doubleArray0);
      assertEquals(1107, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(8, doubleArray0.length);
      assertNotNull(matrix0);
      
      Matrix<Double> matrix1 = new Matrix<Double>(0, 0);
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Double> matrix2 = matrix0.multiply(matrix1);
      assertEquals(0, matrix2.getCols());
      assertEquals(1107, matrix2.getRows());
      assertEquals(1107, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(8, doubleArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Double> matrix3 = matrix0.subtract(matrix2);
      assertEquals(0, matrix2.getCols());
      assertEquals(1107, matrix2.getRows());
      assertEquals(1107, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(1107, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(8, doubleArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix0);
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Double> matrix4 = matrix0.add(matrix3);
      assertEquals(0, matrix2.getCols());
      assertEquals(1107, matrix2.getRows());
      assertEquals(1107, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix4.getCols());
      assertEquals(1107, matrix4.getRows());
      assertEquals(1107, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(8, doubleArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix0);
      assertTrue(matrix2.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix0));
      assertFalse(matrix4.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix3));
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix3));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix3));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      
      boolean boolean0 = matrix4.equals(doubleArray4[2]);
      assertEquals(0, matrix2.getCols());
      assertEquals(1107, matrix2.getRows());
      assertEquals(1107, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix4.getCols());
      assertEquals(1107, matrix4.getRows());
      assertEquals(1107, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(8, doubleArray0.length);
      assertEquals(5, doubleArray4.length);
      assertFalse(boolean0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix2);
      assertNotSame(doubleArray4, doubleArray7);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray6);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix0);
      assertTrue(matrix2.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix4));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      assertTrue(matrix3.equals((Object)matrix4));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix0));
      assertFalse(matrix4.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix3));
      assertFalse(doubleArray4.equals((Object)doubleArray7));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray6));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix3));
      assertTrue(matrix0.equals((Object)matrix4));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix3));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix4));
      assertFalse(matrix1.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Matrix<Float> matrix0 = new Matrix<Float>(1, 1);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.getColumn(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigInteger[][] bigIntegerArray0 = new BigInteger[4][9];
      BigInteger[] bigIntegerArray1 = new BigInteger[21];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      bigIntegerArray1[0] = bigInteger0;
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      bigIntegerArray1[1] = bigInteger1;
      BigInteger bigInteger2 = BigInteger.ONE;
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      bigIntegerArray1[2] = bigInteger2;
      BigInteger bigInteger3 = BigInteger.ONE;
      assertEquals((short)1, bigInteger3.shortValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      
      bigIntegerArray1[3] = bigInteger3;
      bigIntegerArray0[0] = bigIntegerArray1;
      BigInteger[] bigIntegerArray2 = new BigInteger[1];
      assertFalse(bigIntegerArray2.equals((Object)bigIntegerArray1));
      
      bigIntegerArray2[0] = bigInteger0;
      byte byte0 = bigInteger0.byteValueExact();
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, byte0);
      assertSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      
      bigIntegerArray0[1] = bigIntegerArray2;
      BigInteger bigInteger4 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertNotNull(bigInteger4);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger3);
      assertSame(bigInteger4, bigInteger1);
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      
      bigIntegerArray0[2] = bigIntegerArray2;
      BigInteger[] bigIntegerArray3 = new BigInteger[8];
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray1));
      assertFalse(bigIntegerArray3.equals((Object)bigIntegerArray2));
      
      bigIntegerArray3[0] = bigInteger3;
      bigIntegerArray3[1] = bigInteger3;
      bigIntegerArray3[2] = bigInteger0;
      bigIntegerArray3[3] = bigInteger3;
      bigIntegerArray3[4] = bigInteger4;
      BigInteger bigInteger5 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger5.byteValue());
      assertEquals((short)10, bigInteger5.shortValue());
      assertNotNull(bigInteger5);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger0);
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      
      bigIntegerArray3[5] = bigInteger5;
      bigIntegerArray3[6] = bigInteger4;
      bigIntegerArray0[3] = bigIntegerArray3;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1, bigIntegerArray0);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(4, bigIntegerArray0.length);
      assertNotNull(matrix0);
      
      Matrix<BigInteger> matrix1 = matrix0.add(matrix0);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(4, bigIntegerArray0.length);
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<BigInteger> matrix2 = matrix1.subtract(matrix0);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix1.getCols());
      assertEquals(1, matrix1.getRows());
      assertEquals(1, matrix2.getRows());
      assertEquals(1, matrix2.getCols());
      assertEquals(4, bigIntegerArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      Matrix<BigInteger> matrix3 = matrix0.multiply(matrix0);
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix3.getRows());
      assertEquals(1, matrix3.getCols());
      assertEquals(4, bigIntegerArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      
      Matrix<BigInteger> matrix4 = matrix3.identity();
      assertEquals(1, matrix0.getCols());
      assertEquals(1, matrix0.getRows());
      assertEquals(1, matrix3.getRows());
      assertEquals(1, matrix3.getCols());
      assertEquals(1, matrix4.getRows());
      assertEquals(1, matrix4.getCols());
      assertEquals(4, bigIntegerArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix4, matrix1);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix3);
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix3));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix3));
      assertFalse(matrix4.equals((Object)matrix1));
      assertTrue(matrix4.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix0));
      
      // Undeclared exception!
      try { 
        matrix3.getRow(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Matrix<Long> matrix0 = new Matrix<Long>(0, 3770);
      assertEquals(0, matrix0.getRows());
      assertEquals(3770, matrix0.getCols());
      assertNotNull(matrix0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      boolean boolean0 = matrix0.equals(bigInteger0);
      assertEquals(0, matrix0.getRows());
      assertEquals(3770, matrix0.getCols());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(boolean0);
      
      matrix0.hashCode();
      assertEquals(0, matrix0.getRows());
      assertEquals(3770, matrix0.getCols());
      
      // Undeclared exception!
      try { 
        matrix0.getRow(3770);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Double[][] doubleArray0 = new Double[5][8];
      Double[] doubleArray1 = new Double[2];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double1;
      doubleArray2[1] = double0;
      doubleArray2[2] = double1;
      doubleArray2[3] = double0;
      doubleArray2[4] = double0;
      doubleArray2[5] = double1;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = double1;
      doubleArray3[1] = double1;
      doubleArray3[2] = double1;
      doubleArray3[3] = double1;
      Double double2 = new Double(2536.0);
      assertEquals(2536.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray3[4] = double2;
      doubleArray3[5] = double1;
      doubleArray0[2] = doubleArray3;
      Double[] doubleArray4 = new Double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = double1;
      doubleArray4[1] = double0;
      doubleArray4[2] = double0;
      doubleArray4[3] = double2;
      doubleArray4[4] = double2;
      doubleArray4[5] = double0;
      doubleArray4[6] = double2;
      doubleArray0[3] = doubleArray4;
      Double[] doubleArray5 = new Double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = double0;
      Double double3 = new Double((double) doubleArray2[1]);
      assertEquals(6, doubleArray2.length);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      
      doubleArray5[1] = double3;
      doubleArray5[2] = double1;
      doubleArray5[3] = double1;
      doubleArray5[4] = double1;
      doubleArray5[5] = double2;
      doubleArray5[6] = double2;
      doubleArray5[7] = double2;
      doubleArray5[8] = double1;
      doubleArray0[4] = doubleArray5;
      Matrix<Double> matrix0 = new Matrix<Double>(0, 0, doubleArray0);
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(5, doubleArray0.length);
      assertNotNull(matrix0);
      
      Matrix<Double> matrix1 = new Matrix<Double>(31, 31);
      assertEquals(31, matrix1.getRows());
      assertEquals(31, matrix1.getCols());
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Double> matrix2 = matrix0.add(matrix1);
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(31, matrix1.getRows());
      assertEquals(31, matrix1.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(5, doubleArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      
      Matrix<Double> matrix3 = matrix1.multiply(matrix2);
      assertEquals(31, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(31, matrix1.getRows());
      assertEquals(31, matrix1.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(5, doubleArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      
      matrix2.copy(matrix3);
      assertEquals(31, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, matrix0.getCols());
      assertEquals(0, matrix0.getRows());
      assertEquals(31, matrix1.getRows());
      assertEquals(31, matrix1.getCols());
      assertEquals(0, matrix2.getRows());
      assertEquals(0, matrix2.getCols());
      assertEquals(5, doubleArray0.length);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix0);
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)matrix3));
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix1.equals((Object)matrix3));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertFalse(matrix2.equals((Object)matrix1));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix3));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(2591, 0);
      assertEquals(2591, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertNotNull(matrix0);
      
      Integer[][] integerArray0 = new Integer[0][8];
      Matrix<Integer> matrix1 = new Matrix<Integer>((-1), 0, integerArray0);
      assertEquals((-1), matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, integerArray0.length);
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      
      Matrix<Integer> matrix2 = matrix0.add(matrix1);
      assertEquals(2591, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals((-1), matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getCols());
      assertEquals(2591, matrix2.getRows());
      assertEquals(0, integerArray0.length);
      assertNotNull(matrix2);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      boolean boolean0 = matrix1.equals(matrix2);
      assertEquals(2591, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals((-1), matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getCols());
      assertEquals(2591, matrix2.getRows());
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      
      Byte byte0 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = matrix1.equals(byte0);
      assertEquals((-1), matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, integerArray0.length);
      assertFalse(boolean1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix2);
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertTrue(boolean1 == boolean0);
      
      Matrix<Integer> matrix3 = matrix0.multiply(matrix2);
      assertEquals(2591, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals((-1), matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getCols());
      assertEquals(2591, matrix2.getRows());
      assertEquals(2591, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(0, integerArray0.length);
      assertNotNull(matrix3);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix2);
      assertTrue(matrix0.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      
      Matrix<Integer> matrix4 = matrix3.multiply(matrix1);
      assertEquals(2591, matrix0.getRows());
      assertEquals(0, matrix0.getCols());
      assertEquals((-1), matrix1.getRows());
      assertEquals(0, matrix1.getCols());
      assertEquals(0, matrix2.getCols());
      assertEquals(2591, matrix2.getRows());
      assertEquals(2591, matrix3.getRows());
      assertEquals(0, matrix3.getCols());
      assertEquals(2591, matrix4.getRows());
      assertEquals(0, matrix4.getCols());
      assertEquals(0, integerArray0.length);
      assertNotNull(matrix4);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix4);
      assertNotSame(matrix0, matrix3);
      assertNotSame(matrix1, matrix4);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, matrix3);
      assertNotSame(matrix1, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix4);
      assertNotSame(matrix2, matrix3);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, matrix4);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix4, matrix2);
      assertNotSame(matrix4, matrix0);
      assertNotSame(matrix4, matrix3);
      assertNotSame(matrix4, matrix1);
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)matrix3));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix3));
      assertFalse(matrix1.equals((Object)matrix2));
      assertTrue(matrix2.equals((Object)matrix3));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix1));
      assertTrue(matrix3.equals((Object)matrix0));
      assertTrue(matrix3.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix3));
      assertTrue(matrix4.equals((Object)matrix2));
      assertTrue(matrix4.equals((Object)matrix0));
      assertFalse(matrix4.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>((-799), (-799));
      assertEquals((-799), matrix0.getCols());
      assertEquals((-799), matrix0.getRows());
      assertNotNull(matrix0);
      
      BigInteger[] bigIntegerArray0 = new BigInteger[7];
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      bigIntegerArray0[1] = bigInteger1;
      BigInteger bigInteger2 = BigInteger.ONE;
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      
      bigIntegerArray0[2] = bigInteger2;
      BigInteger bigInteger3 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger3.byteValue());
      assertEquals((short)10, bigInteger3.shortValue());
      assertNotNull(bigInteger3);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      
      bigIntegerArray0[3] = bigInteger3;
      BigInteger bigInteger4 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger4.byteValue());
      assertEquals((short)1, bigInteger4.shortValue());
      assertNotNull(bigInteger4);
      assertSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger0);
      assertSame(bigInteger4, bigInteger1);
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      
      bigIntegerArray0[4] = bigInteger4;
      bigIntegerArray0[5] = bigInteger1;
      BigInteger bigInteger5 = BigInteger.valueOf(1L);
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertNotNull(bigInteger5);
      assertSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger0);
      assertSame(bigInteger5, bigInteger4);
      assertSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger3);
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Byte[][] byteArray0 = new Byte[3][1];
      Byte[] byteArray1 = new Byte[1];
      byteArray0[0] = byteArray1;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)113);
      assertEquals((byte)113, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)113);
      assertEquals((byte)113, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      int int0 = Byte.compare((byte)1, (byte)113);
      assertEquals((-112), int0);
      
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      
      Byte byte5 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      
      Byte byte6 = Byte.valueOf((byte)0);
      assertEquals((byte)0, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      
      byteArray0[1] = byteArray1;
      Byte[] byteArray2 = new Byte[2];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray0[2] = byteArray2;
      Matrix<Byte> matrix0 = new Matrix<Byte>((-1), (-1), byteArray0);
      assertEquals((-1), matrix0.getRows());
      assertEquals((-1), matrix0.getCols());
      assertEquals(3, byteArray0.length);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(249, 249);
      Matrix<BigInteger> matrix1 = new Matrix<BigInteger>(249, 344);
      matrix1.equals(matrix0);
      Matrix<BigInteger> matrix2 = matrix0.add(matrix1);
      matrix1.subtract(matrix2);
      Matrix<BigInteger> matrix3 = matrix1.multiply(matrix0);
      // Undeclared exception!
      try { 
        matrix0.multiply(matrix3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Matrix<Float> matrix0 = new Matrix<Float>(12, 220);
      try { 
        matrix0.identity();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Matrix should be a square
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[5][7];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[9];
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = ':';
      charArray0[2] = 'a';
      Matrix<Byte> matrix0 = new Matrix<Byte>(2721, 1);
      matrix0.getRows();
      Long[][] longArray0 = new Long[5][2];
      Long[] longArray1 = new Long[2];
      Long long0 = new Long('a');
      longArray1[0] = long0;
      Long long1 = new Long((-923L));
      longArray1[1] = long1;
      longArray0[0] = longArray1;
      Long[] longArray2 = new Long[6];
      longArray2[0] = long1;
      longArray2[1] = long1;
      longArray2[2] = long1;
      longArray2[3] = long0;
      longArray2[4] = long0;
      longArray2[5] = long1;
      longArray0[1] = longArray2;
      Long[] longArray3 = new Long[1];
      longArray3[0] = long1;
      Long[] longArray4 = new Long[8];
      longArray4[5] = long1;
      longArray4[1] = long0;
      longArray4[2] = long0;
      longArray4[3] = long1;
      longArray4[4] = long1;
      longArray4[7] = long0;
      longArray4[6] = long1;
      longArray4[7] = long0;
      longArray0[3] = longArray4;
      Long[] longArray5 = new Long[7];
      longArray5[0] = long0;
      longArray5[1] = long1;
      Long long2 = new Long((-923L));
      longArray5[3] = long1;
      longArray5[4] = long1;
      longArray5[5] = long0;
      longArray5[6] = long1;
      longArray0[4] = longArray5;
      Matrix<Long> matrix1 = null;
      try {
        matrix1 = new Matrix<Long>((-2068), 2721, longArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>(0, 0);
      Double[][] doubleArray0 = new Double[7][8];
      Double[] doubleArray1 = new Double[7];
      Double double0 = new Double(0.0);
      doubleArray1[0] = double0;
      Double double1 = new Double((-2207.008538285));
      doubleArray1[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray1[2] = double2;
      Double double3 = new Double(1.0);
      Double double4 = new Double((double) doubleArray1[0]);
      doubleArray1[4] = double4;
      doubleArray1[5] = double1;
      Double double5 = new Double(425.0);
      doubleArray1[6] = double5;
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[7];
      doubleArray2[0] = double4;
      doubleArray2[1] = double3;
      doubleArray2[2] = double2;
      doubleArray2[4] = double2;
      doubleArray2[5] = double1;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[4];
      doubleArray3[0] = double1;
      Double double6 = new Double(1.0);
      doubleArray3[1] = double6;
      doubleArray3[2] = double1;
      doubleArray3[3] = double1;
      doubleArray0[2] = doubleArray3;
      Double[] doubleArray4 = new Double[3];
      doubleArray4[0] = double1;
      doubleArray4[1] = doubleArray1[1];
      doubleArray4[2] = double3;
      doubleArray0[3] = doubleArray4;
      Double[] doubleArray5 = new Double[1];
      doubleArray5[0] = doubleArray1[2];
      doubleArray0[4] = doubleArray5;
      Double[] doubleArray6 = new Double[9];
      doubleArray6[0] = double3;
      doubleArray6[1] = double4;
      doubleArray6[2] = double6;
      Double double7 = new Double(0);
      doubleArray6[3] = double7;
      doubleArray6[4] = double1;
      doubleArray6[5] = double6;
      doubleArray6[7] = double2;
      doubleArray6[8] = double0;
      doubleArray0[5] = doubleArray6;
      Double[] doubleArray7 = new Double[1];
      doubleArray7[0] = double0;
      doubleArray0[6] = doubleArray7;
      Matrix<Double> matrix1 = new Matrix<Double>(31, 0, doubleArray0);
      Matrix<Double> matrix2 = matrix0.subtract(matrix1);
      Matrix<Double> matrix3 = matrix0.add(matrix2);
      Matrix<Double> matrix4 = matrix3.add(matrix2);
      assertEquals(31, matrix1.getRows());
      assertTrue(matrix4.equals((Object)matrix2));
      assertNotSame(matrix2, matrix0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int int0 = 1;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1);
      Matrix<BigInteger> matrix1 = matrix0.identity();
      Matrix<BigInteger> matrix2 = matrix1.add(matrix1);
      matrix1.equals(matrix1);
      Matrix<BigInteger> matrix3 = matrix1.add(matrix2);
      Matrix<BigInteger> matrix4 = matrix3.multiply(matrix1);
      matrix4.equals(matrix2);
      Float[][] floatArray0 = new Float[7][8];
      Float[] floatArray1 = new Float[2];
      Float float0 = new Float((double) 1);
      floatArray1[0] = float0;
      Float float1 = new Float((float) 1);
      floatArray1[1] = float1;
      floatArray0[0] = floatArray1;
      Float[] floatArray2 = new Float[7];
      floatArray2[0] = float1;
      floatArray2[1] = float0;
      floatArray2[2] = float1;
      floatArray2[3] = float1;
      floatArray2[4] = float0;
      floatArray2[5] = float0;
      floatArray2[6] = float0;
      floatArray0[1] = floatArray2;
      Float[] floatArray3 = new Float[4];
      floatArray3[0] = float0;
      floatArray3[1] = float0;
      floatArray3[2] = float1;
      floatArray3[3] = float1;
      floatArray0[2] = floatArray3;
      Float[] floatArray4 = new Float[2];
      floatArray4[0] = float0;
      floatArray4[1] = float1;
      floatArray0[3] = floatArray4;
      Float[] floatArray5 = new Float[4];
      Float float2 = new Float((double) floatArray3[2]);
      floatArray5[0] = float2;
      floatArray5[1] = float0;
      Float float3 = new Float((-1681.957F));
      floatArray5[2] = float3;
      floatArray5[3] = float0;
      floatArray0[4] = floatArray5;
      Float[] floatArray6 = new Float[2];
      floatArray6[0] = float1;
      floatArray6[1] = float1;
      floatArray0[5] = floatArray6;
      Float[] floatArray7 = new Float[1];
      floatArray7[0] = float3;
      floatArray0[6] = floatArray7;
      Matrix<Float> matrix5 = new Matrix<Float>(1, 1, floatArray0);
      Matrix<Float> matrix6 = matrix5.identity();
      Matrix<Float> matrix7 = matrix6.multiply(matrix5);
      matrix7.copy(matrix6);
      // Undeclared exception!
      try { 
        matrix2.equals(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1);
      Matrix<BigInteger> matrix1 = matrix0.identity();
      Matrix<BigInteger> matrix2 = new Matrix<BigInteger>(1, 1);
      matrix1.equals(matrix1);
      // Undeclared exception!
      try { 
        matrix1.add(matrix2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      int int0 = 1;
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1);
      Matrix<BigInteger> matrix1 = matrix0.identity();
      // Undeclared exception!
      try { 
        matrix0.subtract(matrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Matrix<BigInteger> matrix0 = new Matrix<BigInteger>(1, 1);
      Matrix<BigInteger> matrix1 = matrix0.identity();
      // Undeclared exception!
      try { 
        matrix0.subtract(matrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Double[][] doubleArray0 = new Double[10][7];
      Double[] doubleArray1 = new Double[4];
      Double double0 = new Double(1);
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      Double double1 = new Double(473.4);
      doubleArray1[2] = double1;
      Double double2 = new Double(1.0);
      doubleArray1[3] = double2;
      doubleArray0[0] = doubleArray1;
      Double double3 = new Double((-1.0));
      Double double4 = new Double((-1.0));
      Double[] doubleArray2 = new Double[7];
      doubleArray2[0] = double0;
      doubleArray2[1] = double2;
      doubleArray2[2] = double4;
      doubleArray2[3] = double4;
      doubleArray2[4] = double4;
      doubleArray2[5] = double4;
      doubleArray2[6] = double0;
      doubleArray0[2] = doubleArray2;
      Matrix<Double> matrix0 = new Matrix<Double>(1, 1, doubleArray0);
      Matrix<Double> matrix1 = matrix0.identity();
      Matrix<Double> matrix2 = matrix0.multiply(matrix1);
      Matrix<Double> matrix3 = matrix2.add(matrix0);
      // Undeclared exception!
      try { 
        matrix3.get((-1553), (-1553));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Matrix<BigDecimal> matrix0 = new Matrix<BigDecimal>(12, 12);
      matrix0.toString();
      // Undeclared exception!
      try { 
        matrix0.multiply(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }
}
