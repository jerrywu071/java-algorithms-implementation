/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 30 22:53:26 GMT 2024
 */

package com.jwetherell.algorithms.mathematics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jwetherell.algorithms.data_structures.Matrix;
import com.jwetherell.algorithms.mathematics.LUDecomposition;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LUDecomposition_ESTest extends LUDecomposition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(2);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double1;
      Double double2 = new Double((-1339.0613575811308));
      Double.isFinite(1191.6494430188102);
      Double[][] doubleArray1 = new Double[6][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Double[] doubleArray2 = new Double[6];
      doubleArray2[0] = double0;
      doubleArray2[1] = double2;
      doubleArray2[2] = double2;
      doubleArray2[3] = double1;
      doubleArray2[4] = double0;
      doubleArray2[5] = double2;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      Matrix<Double> matrix0 = new Matrix<Double>(2, 2, doubleArray1);
      LUDecomposition lUDecomposition0 = new LUDecomposition(matrix0);
      Matrix<Double> matrix1 = lUDecomposition0.getU();
      Matrix<Double> matrix2 = matrix1.identity();
      Matrix<Double> matrix3 = matrix2.subtract(matrix0);
      LUDecomposition lUDecomposition1 = new LUDecomposition(matrix3);
      lUDecomposition0.getL();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double[][] doubleArray0 = new Double[7][7];
      Double[] doubleArray1 = new Double[8];
      Double double0 = new Double(6);
      Double double1 = new Double((-53.699392481));
      doubleArray1[2] = double1;
      doubleArray1[3] = doubleArray1[2];
      doubleArray1[0] = double1;
      Double double2 = new Double(6);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      Double[] doubleArray2 = new Double[6];
      Double double3 = new Double((-3793.23889294002));
      Double double4 = new Double((double) doubleArray1[2]);
      doubleArray0[5] = doubleArray1;
      Matrix<Double> matrix0 = new Matrix<Double>(6, 6, doubleArray0);
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double[][] doubleArray0 = new Double[4][6];
      Double[] doubleArray1 = new Double[4];
      Double double0 = new Double(2);
      doubleArray1[0] = double0;
      doubleArray1[1] = doubleArray1[0];
      Double double1 = new Double((double) doubleArray1[1]);
      doubleArray1[2] = double1;
      Double double2 = new Double((-1339.720002937));
      doubleArray1[3] = double2;
      doubleArray0[0] = doubleArray1;
      Matrix<Double> matrix0 = new Matrix<Double>(2, 2, doubleArray0);
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double[][] doubleArray0 = new Double[7][7];
      Double[] doubleArray1 = new Double[9];
      Double double0 = new Double(1.0);
      doubleArray1[0] = double0;
      Double double1 = new Double((-3793.23889294002));
      Double double2 = new Double((-53.699392481));
      doubleArray1[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray1[3] = doubleArray1[0];
      doubleArray1[4] = double2;
      Double double4 = new Double(1);
      doubleArray1[5] = double4;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      Double[] doubleArray2 = new Double[1];
      Double double5 = new Double((-3793.23889294002));
      doubleArray2[0] = double5;
      doubleArray0[2] = doubleArray2;
      Double double6 = new Double((double) doubleArray1[2]);
      Double[] doubleArray3 = new Double[3];
      doubleArray3[0] = double3;
      doubleArray3[1] = double0;
      doubleArray3[2] = double0;
      Double[] doubleArray4 = new Double[4];
      doubleArray4[0] = double5;
      doubleArray4[1] = double5;
      doubleArray1[0] = double3;
      doubleArray4[3] = double4;
      doubleArray0[5] = doubleArray4;
      Double[] doubleArray5 = new Double[0];
      doubleArray0[6] = doubleArray5;
      Matrix<Double> matrix0 = new Matrix<Double>(1, 1, doubleArray0);
      LUDecomposition lUDecomposition0 = new LUDecomposition(matrix0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double[][] doubleArray0 = new Double[7][7];
      Double[] doubleArray1 = new Double[9];
      Double double0 = new Double(1.0);
      doubleArray1[0] = double0;
      Double double1 = new Double((-3793.23889294002));
      Double double2 = new Double((-53.699392481));
      doubleArray1[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray1[3] = double3;
      doubleArray1[4] = double2;
      Double double4 = new Double(1);
      doubleArray1[5] = double4;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      Double[] doubleArray2 = new Double[1];
      Double double5 = new Double((-3793.23889294002));
      doubleArray2[0] = double5;
      doubleArray0[2] = doubleArray2;
      Double double6 = new Double((double) doubleArray1[2]);
      Double[] doubleArray3 = new Double[3];
      doubleArray3[0] = double3;
      doubleArray3[1] = double0;
      doubleArray3[2] = double0;
      Double[] doubleArray4 = new Double[4];
      doubleArray4[0] = double5;
      doubleArray4[1] = double5;
      doubleArray4[2] = double3;
      doubleArray4[3] = double4;
      doubleArray0[5] = doubleArray4;
      Double[] doubleArray5 = new Double[0];
      doubleArray0[6] = doubleArray5;
      Matrix<Double> matrix0 = new Matrix<Double>(1, 1, doubleArray0);
      LUDecomposition lUDecomposition0 = new LUDecomposition(matrix0);
      lUDecomposition0.getU();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double[][] doubleArray0 = new Double[3][9];
      Double[] doubleArray1 = new Double[9];
      Double double0 = new Double(0.0);
      doubleArray1[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray1[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray1[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray1[3] = double3;
      Double double4 = new Double(2024.7);
      doubleArray1[4] = double4;
      Double double5 = new Double((double) doubleArray1[2]);
      doubleArray1[5] = double5;
      Double double6 = new Double((double) doubleArray1[0]);
      doubleArray1[6] = double6;
      Double double7 = new Double((-656.27250543652));
      doubleArray1[7] = double7;
      Double double8 = new Double(3191.406065769948);
      doubleArray1[8] = double8;
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = double7;
      doubleArray2[1] = double5;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[3];
      doubleArray3[0] = double7;
      doubleArray3[1] = double4;
      doubleArray3[2] = double4;
      doubleArray0[2] = doubleArray3;
      Matrix<Double> matrix0 = new Matrix<Double>(1, 1, doubleArray0);
      Matrix<Double> matrix1 = matrix0.identity();
      Matrix<Double> matrix2 = matrix0.subtract(matrix1);
      LUDecomposition lUDecomposition0 = new LUDecomposition(matrix2);
      lUDecomposition0.getL();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>(1, 1);
      Matrix<Double> matrix1 = matrix0.identity();
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(matrix1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Double
         //
         verifyException("com.jwetherell.algorithms.mathematics.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double[][] doubleArray0 = new Double[7][7];
      Double[] doubleArray1 = new Double[6];
      Double double0 = new Double(1.0);
      doubleArray1[0] = double0;
      Double double1 = new Double((-3781.7431464258));
      doubleArray1[1] = double1;
      Double double2 = new Double((-53.699392481));
      doubleArray1[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray1[3] = double3;
      Double double4 = new Double((-53.699392481));
      doubleArray1[4] = double4;
      Double double5 = new Double(1);
      doubleArray1[5] = double5;
      doubleArray0[0] = doubleArray1;
      Double[] doubleArray2 = new Double[1];
      doubleArray2[0] = double5;
      doubleArray0[1] = doubleArray2;
      Double[] doubleArray3 = new Double[1];
      Double double6 = new Double((-3781.7431464258));
      doubleArray3[0] = double6;
      doubleArray0[2] = doubleArray3;
      Double[] doubleArray4 = new Double[4];
      doubleArray4[0] = double3;
      doubleArray4[1] = double1;
      doubleArray4[2] = double4;
      Double double7 = new Double((double) doubleArray1[2]);
      doubleArray4[3] = double7;
      doubleArray0[3] = doubleArray4;
      Double[] doubleArray5 = new Double[3];
      doubleArray5[0] = double3;
      doubleArray5[1] = double0;
      doubleArray5[2] = double0;
      doubleArray0[4] = doubleArray5;
      Double[] doubleArray6 = new Double[4];
      doubleArray6[0] = double6;
      doubleArray6[1] = double6;
      doubleArray6[2] = double3;
      doubleArray6[3] = double5;
      doubleArray0[5] = doubleArray6;
      Double[] doubleArray7 = new Double[0];
      doubleArray0[6] = doubleArray7;
      Matrix<Double> matrix0 = new Matrix<Double>(1, 1, doubleArray0);
      LUDecomposition lUDecomposition0 = new LUDecomposition(matrix0);
      lUDecomposition0.getPermutation();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>(4935, 4935);
      LUDecomposition lUDecomposition0 = new LUDecomposition(matrix0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>(0, 0);
      Double double0 = new Double(0);
      matrix0.equals(double0);
      LUDecomposition lUDecomposition0 = new LUDecomposition(matrix0);
      Matrix<Double> matrix1 = lUDecomposition0.getU();
      List<Integer> list0 = lUDecomposition0.getPermutation();
      assertTrue(list0.isEmpty());
      
      Matrix<Double> matrix2 = lUDecomposition0.getL();
      assertTrue(matrix2.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>(1, 1);
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.mathematics.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>(0, 0);
      LUDecomposition lUDecomposition0 = new LUDecomposition(matrix0);
      lUDecomposition0.getU();
      try { 
        matrix0.identity();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>(0, 0);
      LUDecomposition lUDecomposition0 = new LUDecomposition(matrix0);
      Matrix<Double> matrix1 = lUDecomposition0.getL();
      Matrix<Double> matrix2 = matrix1.subtract(matrix0);
      LUDecomposition lUDecomposition1 = new LUDecomposition(matrix2);
      assertFalse(lUDecomposition1.equals((Object)lUDecomposition0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>(1465, 1);
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix is not square
         //
         verifyException("com.jwetherell.algorithms.mathematics.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>((-4107), (-4107));
      matrix0.toString();
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(matrix0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.mathematics.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>(322, 2475);
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix is not square
         //
         verifyException("com.jwetherell.algorithms.mathematics.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition((Matrix<Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.mathematics.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(2);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double((double) doubleArray0[1]);
      Double[][] doubleArray1 = new Double[24][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      Matrix<Double> matrix0 = new Matrix<Double>(2, 2, doubleArray1);
      LUDecomposition lUDecomposition0 = new LUDecomposition(matrix0);
      Matrix<Double> matrix1 = matrix0.identity();
      Matrix<Double> matrix2 = matrix1.subtract(matrix0);
      LUDecomposition lUDecomposition1 = new LUDecomposition(matrix2);
      Matrix<Double> matrix3 = lUDecomposition0.getL();
      assertEquals(2, matrix3.getCols());
      assertEquals(2, matrix3.getRows());
      
      List<Integer> list0 = lUDecomposition0.getPermutation();
      assertEquals(2, list0.size());
      
      Matrix<Double> matrix4 = lUDecomposition0.getU();
      assertEquals(2, matrix4.getCols());
      assertEquals(2, matrix4.getRows());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Matrix<Double> matrix0 = new Matrix<Double>(30, 75);
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix is not square
         //
         verifyException("com.jwetherell.algorithms.mathematics.LUDecomposition", e);
      }
  }
}
