/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 30 23:03:56 GMT 2024
 */

package com.jwetherell.algorithms.numbers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jwetherell.algorithms.numbers.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-3745.39846203891), 0.0);
      String string0 = complex0.toString();
      assertEquals("(-3745.39846203891,0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(2147.0, 2147.0);
      Complex complex1 = complex0.sub(complex0);
      assertEquals(3036.3165184150353, complex0.abs(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1069.133249));
      Complex complex1 = complex0.sub(complex0);
      assertEquals(0.0, complex1.real, 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(0.0, complex0.real, 0.01);
      assertEquals(1069.133249, complex0.abs(), 0.01);
      assertEquals(0.0, complex1.imaginary, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, (-3745.39846203891));
      Complex complex2 = complex0.add(complex1);
      assertEquals(0.0, complex2.real, 0.01);
      assertNotSame(complex2, complex1);
      assertEquals((-3745.39846203891), complex2.imaginary, 0.01);
      assertEquals(0.0, complex1.real, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-3745.39846203891), 0.0);
      Complex complex1 = complex0.add(complex0);
      assertEquals(7490.79692407782, complex1.abs(), 0.01);
      assertEquals(0.0, complex0.imaginary, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex((-3745.39846203891), 0.0);
      Complex complex2 = complex1.multiply(complex0);
      assertEquals(0.0, complex0.real, 0.01);
      assertEquals(0.0, complex0.imaginary, 0.01);
      assertEquals(-0.0, complex2.real, 0.01);
      assertEquals(0.0, complex2.imaginary, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, (-3745.39846203891));
      Complex complex2 = complex1.multiply(complex0);
      assertNotSame(complex2, complex0);
      assertEquals((-3745.39846203891), complex1.imaginary, 0.01);
      assertEquals(0.0, complex2.real, 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.imaginary, 0.01);
      assertEquals(0.0, complex1.real, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, (-3745.39846203891));
      Complex complex2 = complex0.sub(complex1);
      assertEquals(3745.39846203891, complex2.imaginary, 0.01);
      assertEquals(0.0, complex2.real, 0.01);
      assertEquals(0.0, complex0.real, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(174.48831838, 174.48831838);
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(60892.3465021605, complex1.imaginary, 0.01);
      assertEquals(60892.3465021605, complex1.abs(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.polar(1.0, (-3959.89676));
      double double0 = complex0.abs();
      assertEquals((-0.9967390817296975), complex0.imaginary, 0.01);
      assertEquals(0.9999999999999999, double0, 0.01);
      assertEquals(0.0806920253348453, complex0.real, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      // Undeclared exception!
      try { 
        complex0.sub((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.numbers.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.numbers.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.polar(0.0, 0.0);
      // Undeclared exception!
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.numbers.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex();
      Complex complex1 = complex0.sub(complex0);
      assertEquals(0.0, complex1.imaginary, 0.01);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex1.real, 0.01);
      assertEquals(0.0, complex0.abs(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex();
      Complex complex1 = complex0.add(complex0);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertNotSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex();
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }
}
