/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 30 22:50:26 GMT 2024
 */

package com.jwetherell.algorithms.mathematics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jwetherell.algorithms.mathematics.Division;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Division_ESTest extends Division_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 486;
      int int1 = 0;
      Division.divisionUsingLogs(486, 0);
      Division division0 = new Division();
      int int2 = 0;
      // Undeclared exception!
      Division.divisionUsingLoop(0, 0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      Division.divisionUsingMultiplication(0, (-878));
      Division.division(1319, (-878));
      // Undeclared exception!
      Division.divisionUsingShift((-4393), 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Division.divisionUsingShift(0, 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Division division0 = new Division();
      Division.divisionUsingLogs((-1595), (-1595));
      int int0 = (-1293);
      Division.division((-1595), (-1293));
      Division.divisionUsingLoop((-1595), (-1293));
      Division.divisionUsingShift((-1595), 2260);
      // Undeclared exception!
      Division.divisionUsingLoop(0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Division.divisionUsingLogs((-2532), 2110);
      Division.divisionUsingRecursion((-2532), (-2532));
      Division.divisionUsingShift((-2532), 2110);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Division.division((-426), (-426));
      Division.divisionUsingRecursion((-426), (-426));
      Division.divisionUsingRecursion((-426), (-426));
      Division.divisionUsingLoop((-426), (-426));
      Division.divisionUsingMultiplication((-426), 1);
      Division.divisionUsingRecursion(1, 0);
      // Undeclared exception!
      Division.divisionUsingMultiplication((-619), 0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Division.divisionUsingMultiplication(0, (-1));
      Division.divisionUsingLoop((-1), 535);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      int int1 = (-77);
      Division.divisionUsingRecursion(0, (-77));
      // Undeclared exception!
      Division.divisionUsingShift((-77), 0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Division.divisionUsingRecursion(2235, 2235);
      Division.divisionUsingRecursion(2235, 2235);
      Division.divisionUsingShift(2235, (-1));
      int int0 = 0;
      // Undeclared exception!
      try { 
        Division.division(2235, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.jwetherell.algorithms.mathematics.Division", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Division.divisionUsingRecursion((-1907), (-1907));
      int int0 = 537;
      // Undeclared exception!
      try { 
        Division.division(537, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.jwetherell.algorithms.mathematics.Division", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Division.divisionUsingLogs((-1), (-1));
      Division division0 = new Division();
      Division.divisionUsingLogs((-1), 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Division division0 = new Division();
      Division.divisionUsingLogs(0, 0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Division division0 = new Division();
      int int0 = 0;
      // Undeclared exception!
      Division.divisionUsingMultiplication(0, 0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1525);
      Division.divisionUsingRecursion(0, (-1525));
      int int2 = 0;
      // Undeclared exception!
      Division.divisionUsingLoop(0, 0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Division.divisionUsingRecursion(3810, (-937));
      Division.divisionUsingLoop((-1389), (-1389));
      int int0 = (-203);
      int int1 = 0;
      // Undeclared exception!
      try { 
        Division.divisionUsingRecursion(int0, int1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Division.divisionUsingShift(1, (-223));
      Division.divisionUsingMultiplication((-1), (-1));
      Division.divisionUsingLoop(0, 79);
      Division.divisionUsingLoop((-223), 54);
      Division.divisionUsingLoop((-2697), 3);
      Division.divisionUsingRecursion((-904), (-904));
      Division.divisionUsingLoop(1, (-1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Division.divisionUsingRecursion(343, 343);
      Division division0 = new Division();
      Division.divisionUsingLoop(343, 343);
      Division.divisionUsingShift(1918, 343);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-927);
      Division.divisionUsingLogs((-927), (-2707));
      int int1 = 0;
      // Undeclared exception!
      try { 
        Division.divisionUsingRecursion(int0, int1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Division.divisionUsingRecursion((-5346), (-5346));
      int int0 = 0;
      // Undeclared exception!
      Division.divisionUsingLoop(0, 0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Division.divisionUsingRecursion((-461), 1503);
      Division division0 = new Division();
      Division.divisionUsingRecursion((-1), (-1));
      Division.divisionUsingLogs(2669, 1503);
      Division.divisionUsingMultiplication((-315), 2327);
      Division.divisionUsingMultiplication(2327, (-1));
      Division.divisionUsingLoop((-1408), (-392));
      Division.divisionUsingLogs((-1), 2669);
      Division.divisionUsingMultiplication((-1), (-392));
      Division.divisionUsingShift((-1408), (-1));
      // Undeclared exception!
      Division.divisionUsingLoop(656, 0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Division.divisionUsingShift((-1), (-1));
      Division.divisionUsingShift((-1), (-1));
      Division.divisionUsingLogs((-355), (-1));
      Division.division(1374, 1);
      Division.division((-1), 469);
      Division.divisionUsingLoop((-1), (-1));
      Division division0 = new Division();
      Division.divisionUsingRecursion(1, (-2003));
      Division.divisionUsingLoop((-1), 469);
      Division.divisionUsingRecursion((-2003), (-2003));
      Division.divisionUsingLoop((-1), (-1));
      Division.divisionUsingMultiplication(469, 824);
      Division.divisionUsingRecursion((-1), (-1));
      Division.divisionUsingShift(469, 469);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Division.divisionUsingMultiplication(1, 1);
      int int0 = (-517);
      Division.divisionUsingLogs(1, (-517));
      Division division0 = new Division();
      int int1 = (-1);
      Division.divisionUsingLogs((-1), (-1));
      int int2 = (-3176);
      Division.divisionUsingShift((-3176), (-1));
      int int3 = 348;
      Division.divisionUsingRecursion((-517), 348);
      Division.division(1, 348);
      Division.divisionUsingShift((-517), (-1));
      Division.divisionUsingRecursion(348, (-3176));
      int int4 = (-1942);
      Division.divisionUsingLoop((-3176), (-1942));
      Division.divisionUsingMultiplication((-517), 1);
      Division.divisionUsingShift((-1942), (-1942));
      Division.divisionUsingLogs(348, 348);
      int int5 = (-724);
      Division.divisionUsingLoop((-1942), (-724));
      int int6 = (-701);
      int int7 = 0;
      // Undeclared exception!
      try { 
        Division.division((-701), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.jwetherell.algorithms.mathematics.Division", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 288;
      Division.divisionUsingLogs(288, 2170);
      int int1 = 0;
      Division.divisionUsingLoop(0, 2170);
      int int2 = 2449;
      Division.divisionUsingLoop(2170, 2449);
      Division.division(2449, 2170);
      Division division0 = new Division();
      int int3 = 1;
      Division.division(1, 1);
      Division.divisionUsingShift(2449, 2449);
      Division.division((-1905), (-2168));
      int int4 = 0;
      // Undeclared exception!
      try { 
        Division.divisionUsingRecursion(int0, int4);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-77);
      Division.divisionUsingShift((-77), (-77));
      Division division0 = new Division();
      int int1 = (-477);
      Division.division((-77), (-477));
      int int2 = 0;
      // Undeclared exception!
      Division.divisionUsingLoop((-77), 0);
  }
}
