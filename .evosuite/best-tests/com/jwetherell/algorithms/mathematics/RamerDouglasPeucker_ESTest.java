/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 30 22:58:49 GMT 2024
 */

package com.jwetherell.algorithms.mathematics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jwetherell.algorithms.mathematics.RamerDouglasPeucker;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RamerDouglasPeucker_ESTest extends RamerDouglasPeucker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Double[]> linkedList0 = new LinkedList<Double[]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      double double1 = Double.min(0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      
      doubleArray0[0] = double0;
      boolean boolean0 = linkedList0.offer(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(linkedList0.contains(doubleArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.removeLastOccurrence(double0);
      assertTrue(linkedList0.contains(doubleArray0));
      assertFalse(boolean1);
      assertEquals((double)double0, (double)double1, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean2 = linkedList0.offerFirst(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(linkedList0.contains(doubleArray0));
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, linkedList0.size());
      
      double double2 = 0.0;
      List<Double[]> list0 = RamerDouglasPeucker.douglasPeucker(linkedList0, 0.0);
      assertTrue(linkedList0.contains(doubleArray0));
      assertTrue(list0.contains(doubleArray0));
      assertNotNull(list0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      double double3 = 2878.97208065;
      // Undeclared exception!
      try { 
        RamerDouglasPeucker.douglasPeucker((List<Double[]>) null, 2878.97208065);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.mathematics.RamerDouglasPeucker", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Double[]> linkedList0 = new LinkedList<Double[]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(1606.221402815506);
      assertNotNull(double0);
      assertEquals(1606.221402815506, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(7, doubleArray0.length);
      assertNotNull(double2);
      assertEquals(1606.221402815506, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2509.691659103);
      assertNotNull(double3);
      assertEquals(2509.691659103, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1606.221402815506);
      assertNotNull(double4);
      assertEquals(1606.221402815506, (double)double4, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      assertNotNull(double5);
      assertEquals(0.0, (double)double5, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[2]);
      assertEquals(7, doubleArray0.length);
      assertNotNull(double6);
      assertEquals(1606.221402815506, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      
      doubleArray0[6] = double6;
      boolean boolean0 = linkedList0.add(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertTrue(linkedList0.contains(doubleArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add((Double[]) null);
      assertTrue(linkedList0.contains(doubleArray0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      boolean boolean2 = linkedList0.add((Double[]) null);
      assertTrue(linkedList0.contains(doubleArray0));
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, linkedList0.size());
      
      // Undeclared exception!
      try { 
        RamerDouglasPeucker.douglasPeucker(linkedList0, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.mathematics.RamerDouglasPeucker", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      List<Double[]> list0 = null;
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        RamerDouglasPeucker.douglasPeucker((List<Double[]>) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.mathematics.RamerDouglasPeucker", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Double[]> linkedList0 = new LinkedList<Double[]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = 1470.774356;
      // Undeclared exception!
      try { 
        RamerDouglasPeucker.douglasPeucker(linkedList0, 1470.774356);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Double[]> linkedList0 = new LinkedList<Double[]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-2253.1752236));
      assertNotNull(double0);
      assertEquals((-2253.1752236), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      boolean boolean0 = linkedList0.add(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(linkedList0.contains(doubleArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      List<Double[]> list0 = RamerDouglasPeucker.douglasPeucker(linkedList0, 2.0);
      assertTrue(linkedList0.contains(doubleArray0));
      assertTrue(list0.contains(doubleArray0));
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      List<Double[]> list1 = RamerDouglasPeucker.douglasPeucker(linkedList0, 988.46865);
      assertNotSame(list1, list0);
      assertTrue(linkedList0.contains(doubleArray0));
      assertTrue(list1.contains(doubleArray0));
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertEquals(1, linkedList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Double[]> linkedList0 = new LinkedList<Double[]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        RamerDouglasPeucker.douglasPeucker(linkedList0, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Double[]> linkedList0 = new LinkedList<Double[]>();
      linkedList0.spliterator();
      double double0 = 682.78970696;
      // Undeclared exception!
      try { 
        RamerDouglasPeucker.douglasPeucker(linkedList0, 682.78970696);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
